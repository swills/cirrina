// Code generated by MockGen. DO NOT EDIT.
// Source: cirrina/cirrinad/disk (interfaces: FileInfoFetcher,LocalFileSystem)
//
// Generated by this command:
//
//	mockgen -destination=file_mocks.go -package=disk . FileInfoFetcher,LocalFileSystem
//

// Package disk is a generated GoMock package.
package disk

import (
	fs "io/fs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileInfoFetcher is a mock of FileInfoFetcher interface.
type MockFileInfoFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFileInfoFetcherMockRecorder
}

// MockFileInfoFetcherMockRecorder is the mock recorder for MockFileInfoFetcher.
type MockFileInfoFetcherMockRecorder struct {
	mock *MockFileInfoFetcher
}

// NewMockFileInfoFetcher creates a new mock instance.
func NewMockFileInfoFetcher(ctrl *gomock.Controller) *MockFileInfoFetcher {
	mock := &MockFileInfoFetcher{ctrl: ctrl}
	mock.recorder = &MockFileInfoFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileInfoFetcher) EXPECT() *MockFileInfoFetcherMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockFileInfoFetcher) Add(arg0 string, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockFileInfoFetcherMockRecorder) Add(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockFileInfoFetcher)(nil).Add), arg0, arg1)
}

// ApplyFileSize mocks base method.
func (m *MockFileInfoFetcher) ApplyFileSize(arg0 string, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyFileSize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyFileSize indicates an expected call of ApplyFileSize.
func (mr *MockFileInfoFetcherMockRecorder) ApplyFileSize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyFileSize", reflect.TypeOf((*MockFileInfoFetcher)(nil).ApplyFileSize), arg0, arg1)
}

// CheckExists mocks base method.
func (m *MockFileInfoFetcher) CheckExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExists indicates an expected call of CheckExists.
func (mr *MockFileInfoFetcherMockRecorder) CheckExists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExists", reflect.TypeOf((*MockFileInfoFetcher)(nil).CheckExists), arg0)
}

// FetchAll mocks base method.
func (m *MockFileInfoFetcher) FetchAll() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll.
func (mr *MockFileInfoFetcherMockRecorder) FetchAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockFileInfoFetcher)(nil).FetchAll))
}

// FetchFileSize mocks base method.
func (m *MockFileInfoFetcher) FetchFileSize(arg0 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFileSize", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFileSize indicates an expected call of FetchFileSize.
func (mr *MockFileInfoFetcherMockRecorder) FetchFileSize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFileSize", reflect.TypeOf((*MockFileInfoFetcher)(nil).FetchFileSize), arg0)
}

// FetchFileUsage mocks base method.
func (m *MockFileInfoFetcher) FetchFileUsage(arg0 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFileUsage", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFileUsage indicates an expected call of FetchFileUsage.
func (mr *MockFileInfoFetcherMockRecorder) FetchFileUsage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFileUsage", reflect.TypeOf((*MockFileInfoFetcher)(nil).FetchFileUsage), arg0)
}

// MockLocalFileSystem is a mock of LocalFileSystem interface.
type MockLocalFileSystem struct {
	ctrl     *gomock.Controller
	recorder *MockLocalFileSystemMockRecorder
}

// MockLocalFileSystemMockRecorder is the mock recorder for MockLocalFileSystem.
type MockLocalFileSystemMockRecorder struct {
	mock *MockLocalFileSystem
}

// NewMockLocalFileSystem creates a new mock instance.
func NewMockLocalFileSystem(ctrl *gomock.Controller) *MockLocalFileSystem {
	mock := &MockLocalFileSystem{ctrl: ctrl}
	mock.recorder = &MockLocalFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalFileSystem) EXPECT() *MockLocalFileSystemMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockLocalFileSystem) Open(arg0 string) (MyFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(MyFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockLocalFileSystemMockRecorder) Open(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockLocalFileSystem)(nil).Open), arg0)
}

// Stat mocks base method.
func (m *MockLocalFileSystem) Stat(arg0 string) (fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockLocalFileSystemMockRecorder) Stat(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockLocalFileSystem)(nil).Stat), arg0)
}
