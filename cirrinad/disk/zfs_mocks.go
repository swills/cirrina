// Code generated by MockGen. DO NOT EDIT.
// Source: cirrina/cirrinad/disk (interfaces: ZfsVolInfoFetcher)
//
// Generated by this command:
//
//	mockgen -destination=zfs_mocks.go -package=disk . ZfsVolInfoFetcher
//

// Package disk is a generated GoMock package.
package disk

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockZfsVolInfoFetcher is a mock of ZfsVolInfoFetcher interface.
type MockZfsVolInfoFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockZfsVolInfoFetcherMockRecorder
	isgomock struct{}
}

// MockZfsVolInfoFetcherMockRecorder is the mock recorder for MockZfsVolInfoFetcher.
type MockZfsVolInfoFetcherMockRecorder struct {
	mock *MockZfsVolInfoFetcher
}

// NewMockZfsVolInfoFetcher creates a new mock instance.
func NewMockZfsVolInfoFetcher(ctrl *gomock.Controller) *MockZfsVolInfoFetcher {
	mock := &MockZfsVolInfoFetcher{ctrl: ctrl}
	mock.recorder = &MockZfsVolInfoFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZfsVolInfoFetcher) EXPECT() *MockZfsVolInfoFetcherMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockZfsVolInfoFetcher) Add(name string, size uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", name, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockZfsVolInfoFetcherMockRecorder) Add(name, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockZfsVolInfoFetcher)(nil).Add), name, size)
}

// ApplyZfsVolumeSize mocks base method.
func (m *MockZfsVolInfoFetcher) ApplyZfsVolumeSize(volumeName string, volSize uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyZfsVolumeSize", volumeName, volSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyZfsVolumeSize indicates an expected call of ApplyZfsVolumeSize.
func (mr *MockZfsVolInfoFetcherMockRecorder) ApplyZfsVolumeSize(volumeName, volSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyZfsVolumeSize", reflect.TypeOf((*MockZfsVolInfoFetcher)(nil).ApplyZfsVolumeSize), volumeName, volSize)
}

// CheckExists mocks base method.
func (m *MockZfsVolInfoFetcher) CheckExists(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExists indicates an expected call of CheckExists.
func (mr *MockZfsVolInfoFetcherMockRecorder) CheckExists(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExists", reflect.TypeOf((*MockZfsVolInfoFetcher)(nil).CheckExists), name)
}

// FetchAll mocks base method.
func (m *MockZfsVolInfoFetcher) FetchAll() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll.
func (mr *MockZfsVolInfoFetcherMockRecorder) FetchAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockZfsVolInfoFetcher)(nil).FetchAll))
}

// FetchZfsVolBlockSize mocks base method.
func (m *MockZfsVolInfoFetcher) FetchZfsVolBlockSize(volumeName string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchZfsVolBlockSize", volumeName)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchZfsVolBlockSize indicates an expected call of FetchZfsVolBlockSize.
func (mr *MockZfsVolInfoFetcherMockRecorder) FetchZfsVolBlockSize(volumeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchZfsVolBlockSize", reflect.TypeOf((*MockZfsVolInfoFetcher)(nil).FetchZfsVolBlockSize), volumeName)
}

// FetchZfsVolumeSize mocks base method.
func (m *MockZfsVolInfoFetcher) FetchZfsVolumeSize(volumeName string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchZfsVolumeSize", volumeName)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchZfsVolumeSize indicates an expected call of FetchZfsVolumeSize.
func (mr *MockZfsVolInfoFetcherMockRecorder) FetchZfsVolumeSize(volumeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchZfsVolumeSize", reflect.TypeOf((*MockZfsVolInfoFetcher)(nil).FetchZfsVolumeSize), volumeName)
}

// FetchZfsVolumeUsage mocks base method.
func (m *MockZfsVolInfoFetcher) FetchZfsVolumeUsage(volumeName string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchZfsVolumeUsage", volumeName)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchZfsVolumeUsage indicates an expected call of FetchZfsVolumeUsage.
func (mr *MockZfsVolInfoFetcherMockRecorder) FetchZfsVolumeUsage(volumeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchZfsVolumeUsage", reflect.TypeOf((*MockZfsVolInfoFetcher)(nil).FetchZfsVolumeUsage), volumeName)
}
