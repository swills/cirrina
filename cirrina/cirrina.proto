syntax = "proto3";

package cirrina;
option go_package = "gitlab.mouf.net/swills/cirrina";

enum NetType {
  VIRTIONET = 0;
  E1000 = 1;
}

enum DiskType {
  NVME = 0;
  AHCIHD = 1;
  VIRTIOBLK = 2;
}

enum SwitchType {
  IF = 0;
  NG = 1;
}

enum NetDevType {
  TAP = 0;
  VMNET = 1;
  NETGRAPH = 2;
}

enum vmStatus {
  STATUS_STOPPED = 0;
  STATUS_STARTING = 1;
  STATUS_RUNNING = 2;
  STATUS_STOPPING = 3;
}

message VMID {
  string value = 1;
}

message DiskId {
  string value = 1;
}

message SwitchId {
  string value = 1;
}

message VmNicId {
  string value = 1;
}

message SetISOReq {
  string id = 1;
  repeated string isoid = 2;
}

message SetDiskReq {
  string id = 1;
  repeated string diskid = 2;
}

message SetNicReq {
  string vmid = 1;
  repeated string vmnicid = 2;
}

message SetVmNicSwitchReq {
  VmNicId vmnicid = 1;
  SwitchId switchid = 2;
}

message SwitchUplinkReq {
  SwitchId switchid = 1;
  optional string uplink = 2;
}

message KbdLayout {
  string name = 1;
  string description = 2;
}

message DiskInfo {
  optional string name = 1;
  optional string description = 2;
  optional string size = 3;
  optional DiskType disk_type = 4;
}

message NetInterfacesReq {
}

message NetIf {
  string InterfaceName = 1;
}

message SwitchInfo {
  optional string name = 1;
  optional string description = 2;
  optional SwitchType switch_type = 3;
  optional string uplink = 4;
}

message SwitchInfoUpdate {
  string id = 1;
  optional string name = 2;
  optional string description = 3;
  optional SwitchType switch_type = 4;
  optional string uplink = 5;
}

message VmNicInfo {
  optional string name = 1;
  optional string description = 2;
  optional string mac = 3;
  optional NetDevType netdevtype = 4;
  optional NetType nettype = 5;
  optional string vmid = 6;
  optional string switchid = 7;
  optional bool ratelimit = 8;
  optional uint64 ratein = 9;
  optional uint64 rateout = 10;
}

message VmNicInfoUpdate {
  VmNicId vmnicid = 1;
  optional string name = 2;
  optional string description = 3;
  optional string mac = 4;
  optional NetDevType netdevtype = 5;
  optional NetType nettype = 6;
  optional string vmid = 7;
  optional string switchid = 8;
}

message VMConfig {
  string id = 1;
  optional string name = 2;
  optional string description = 3;
  optional uint32 cpu = 4;
  optional uint32 mem = 5;
  optional uint32 max_wait = 6;
  optional bool restart = 7;
  optional uint32 restart_delay = 8;
  optional bool screen = 9;
  optional uint32 screen_width = 10;
  optional uint32 screen_height = 11;
  optional bool vncwait = 12;
  optional bool wireguestmem = 13;
  optional bool tablet = 14;
  optional bool storeuefi = 15;
  optional bool utc = 16;
  optional bool hostbridge = 17;
  optional bool acpi = 18;
  optional bool hlt = 19;
  optional bool eop = 20;
  optional bool dpo = 21;
  optional bool ium = 22;
  optional bool net = 23;
  optional string vncport = 24;
  optional string mac = 25;
  optional string keyboard = 26;
  optional bool autostart = 27;
  optional NetDevType netdevtype = 28;
  optional NetType nettype = 29;
  optional bool sound = 30;
  optional string sound_in = 31;
  optional string sound_out = 32;
  optional bool com1 = 33;
  optional string com1dev = 34;
  optional bool com2 = 35;
  optional string com2dev = 36;
  optional bool com3 = 37;
  optional string com3dev = 38;
  optional bool com4 = 39;
  optional string com4dev = 40;
  optional string extra_args = 41;
  optional bool com1log = 42;
  optional bool com2log = 43;
  optional bool com3log = 44;
  optional bool com4log = 45;
  optional uint32 com1speed = 46;
  optional uint32 com2speed = 47;
  optional uint32 com3speed = 48;
  optional uint32 com4speed = 49;
  optional uint32 autostart_delay = 50;
}

message VMsQuery {
}

message ISOsQuery {
}

message KbdQuery {
}

message DisksQuery {
}

message SwitchesQuery {
}

message VmNicsQuery {
}

message RequestID {
  string value = 1;
}

message ReqStatus {
  bool complete = 1;
  bool success = 2;
}

message VMState {
  vmStatus status = 1;
  int32 VncPort = 2;
}

message ReqBool {
  bool success = 1;
}

message ISOID {
  string value = 1;
}

message ISOInfo {
  optional string name = 1;
  optional string description = 2;
}

message ISOUploadInfo {
  ISOID isoid = 1;
  uint64 size = 2;
  string sha512sum = 3;
}

message ISOImageRequest {
  oneof data {
    ISOUploadInfo isouploadinfo = 1;
    bytes image = 2;
  }
}

message ComDataRequest {
  oneof data {
    VMID vm_id = 1;
    bytes com_in_bytes = 2;
  }
}

message ComDataResponse {
  bytes com_out_bytes = 2;
}

service VMInfo {
  rpc AddVM(VMConfig) returns (VMID);
  rpc GetVMs(VMsQuery) returns (stream VMID);
  rpc GetVMConfig(VMID) returns (VMConfig);
  rpc GetVMState(VMID) returns (VMState);
  rpc UpdateVM(VMConfig) returns (ReqBool);
  rpc StartVM(VMID) returns (RequestID);
  rpc StopVM(VMID) returns (RequestID);
  rpc DeleteVM(VMID) returns (RequestID);

  rpc ClearUEFIState(VMID) returns (ReqBool);
  rpc GetNetInterfaces(NetInterfacesReq) returns (stream NetIf);
  rpc RequestStatus(RequestID) returns (ReqStatus);
  rpc GetKeyboardLayouts(KbdQuery) returns (stream KbdLayout);

  rpc GetISOs(ISOsQuery) returns (stream ISOID);
  rpc GetISOInfo(ISOID) returns (ISOInfo);
  rpc AddISO(ISOInfo) returns (ISOID);
  rpc RemoveISO(ISOID) returns (ReqBool);
  rpc SetVmISOs(SetISOReq) returns (ReqBool);
  rpc GetVmISOs(VMID) returns (stream ISOID);
  rpc UploadIso(stream ISOImageRequest) returns (ReqBool);

  rpc GetDisks(DisksQuery) returns (stream DiskId);
  rpc GetDiskInfo(DiskId) returns (DiskInfo);
  rpc AddDisk(DiskInfo) returns (DiskId);
  rpc RemoveDisk(DiskId) returns (ReqBool);
  rpc SetVmDisks(SetDiskReq) returns (ReqBool);
  rpc GetVmDisks(VMID) returns (stream DiskId);
  rpc GetDiskVm(DiskId) returns (VMID);

  rpc GetSwitches(SwitchesQuery) returns (stream SwitchId);
  rpc GetSwitchInfo(SwitchId) returns (SwitchInfo);
  rpc AddSwitch(SwitchInfo) returns (SwitchId);
  rpc SetSwitchInfo(SwitchInfoUpdate) returns (ReqBool);
  rpc RemoveSwitch(SwitchId) returns (ReqBool);
  rpc SetSwitchUplink(SwitchUplinkReq) returns (ReqBool);

  rpc GetVmNicsAll(VmNicsQuery) returns (stream VmNicId);
  rpc GetVmNicInfo(VmNicId) returns (VmNicInfo);
  rpc AddVmNic(VmNicInfo) returns (VmNicId);
  rpc UpdateVmNic(VmNicInfoUpdate) returns (ReqBool);
  rpc RemoveVmNic(VmNicId) returns (ReqBool);
  rpc SetVmNicSwitch(SetVmNicSwitchReq) returns (ReqBool);
  rpc GetVmNicVm(VmNicId) returns (VMID);

  rpc SetVmNics(SetNicReq) returns (ReqBool);
  rpc GetVmNics(VMID) returns (stream VmNicId);

  rpc Com1Interactive(stream ComDataRequest) returns (stream ComDataResponse);
  rpc Com2Interactive(stream ComDataRequest) returns (stream ComDataResponse);
  rpc Com3Interactive(stream ComDataRequest) returns (stream ComDataResponse);
  rpc Com4Interactive(stream ComDataRequest) returns (stream ComDataResponse);
}
