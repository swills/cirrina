// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: cirrina.proto

package cirrina

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VMInfo_AddVM_FullMethodName              = "/cirrina.VMInfo/AddVM"
	VMInfo_GetVMs_FullMethodName             = "/cirrina.VMInfo/GetVMs"
	VMInfo_GetVMConfig_FullMethodName        = "/cirrina.VMInfo/GetVMConfig"
	VMInfo_GetVMState_FullMethodName         = "/cirrina.VMInfo/GetVMState"
	VMInfo_UpdateVM_FullMethodName           = "/cirrina.VMInfo/UpdateVM"
	VMInfo_StartVM_FullMethodName            = "/cirrina.VMInfo/StartVM"
	VMInfo_StopVM_FullMethodName             = "/cirrina.VMInfo/StopVM"
	VMInfo_DeleteVM_FullMethodName           = "/cirrina.VMInfo/DeleteVM"
	VMInfo_ClearUEFIState_FullMethodName     = "/cirrina.VMInfo/ClearUEFIState"
	VMInfo_RequestStatus_FullMethodName      = "/cirrina.VMInfo/RequestStatus"
	VMInfo_GetKeyboardLayouts_FullMethodName = "/cirrina.VMInfo/GetKeyboardLayouts"
	VMInfo_GetISOs_FullMethodName            = "/cirrina.VMInfo/GetISOs"
	VMInfo_GetISOInfo_FullMethodName         = "/cirrina.VMInfo/GetISOInfo"
	VMInfo_AddISO_FullMethodName             = "/cirrina.VMInfo/AddISO"
	VMInfo_SetVmISOs_FullMethodName          = "/cirrina.VMInfo/SetVmISOs"
	VMInfo_GetVmISOs_FullMethodName          = "/cirrina.VMInfo/GetVmISOs"
	VMInfo_GetDisks_FullMethodName           = "/cirrina.VMInfo/GetDisks"
	VMInfo_GetDiskInfo_FullMethodName        = "/cirrina.VMInfo/GetDiskInfo"
	VMInfo_AddDisk_FullMethodName            = "/cirrina.VMInfo/AddDisk"
	VMInfo_RemoveDisk_FullMethodName         = "/cirrina.VMInfo/RemoveDisk"
	VMInfo_SetVmDisks_FullMethodName         = "/cirrina.VMInfo/SetVmDisks"
	VMInfo_GetVmDisks_FullMethodName         = "/cirrina.VMInfo/GetVmDisks"
	VMInfo_GetSwitches_FullMethodName        = "/cirrina.VMInfo/GetSwitches"
	VMInfo_GetSwitchInfo_FullMethodName      = "/cirrina.VMInfo/GetSwitchInfo"
	VMInfo_AddSwitch_FullMethodName          = "/cirrina.VMInfo/AddSwitch"
	VMInfo_RemoveSwitch_FullMethodName       = "/cirrina.VMInfo/RemoveSwitch"
)

// VMInfoClient is the client API for VMInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMInfoClient interface {
	AddVM(ctx context.Context, in *VMConfig, opts ...grpc.CallOption) (*VMID, error)
	GetVMs(ctx context.Context, in *VMsQuery, opts ...grpc.CallOption) (VMInfo_GetVMsClient, error)
	GetVMConfig(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMConfig, error)
	GetVMState(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMState, error)
	UpdateVM(ctx context.Context, in *VMConfig, opts ...grpc.CallOption) (*ReqBool, error)
	StartVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*RequestID, error)
	StopVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*RequestID, error)
	DeleteVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*RequestID, error)
	ClearUEFIState(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*ReqBool, error)
	RequestStatus(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*ReqStatus, error)
	GetKeyboardLayouts(ctx context.Context, in *KbdQuery, opts ...grpc.CallOption) (VMInfo_GetKeyboardLayoutsClient, error)
	GetISOs(ctx context.Context, in *ISOsQuery, opts ...grpc.CallOption) (VMInfo_GetISOsClient, error)
	GetISOInfo(ctx context.Context, in *ISOID, opts ...grpc.CallOption) (*ISOInfo, error)
	AddISO(ctx context.Context, in *ISOInfo, opts ...grpc.CallOption) (*ISOID, error)
	SetVmISOs(ctx context.Context, in *SetISOReq, opts ...grpc.CallOption) (*ReqBool, error)
	GetVmISOs(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VMInfo_GetVmISOsClient, error)
	GetDisks(ctx context.Context, in *DisksQuery, opts ...grpc.CallOption) (VMInfo_GetDisksClient, error)
	GetDiskInfo(ctx context.Context, in *DiskId, opts ...grpc.CallOption) (*DiskInfo, error)
	AddDisk(ctx context.Context, in *DiskInfo, opts ...grpc.CallOption) (*DiskId, error)
	RemoveDisk(ctx context.Context, in *DiskId, opts ...grpc.CallOption) (*ReqBool, error)
	SetVmDisks(ctx context.Context, in *SetDiskReq, opts ...grpc.CallOption) (*ReqBool, error)
	GetVmDisks(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VMInfo_GetVmDisksClient, error)
	GetSwitches(ctx context.Context, in *SwitchesQuery, opts ...grpc.CallOption) (VMInfo_GetSwitchesClient, error)
	GetSwitchInfo(ctx context.Context, in *SwitchId, opts ...grpc.CallOption) (*SwitchInfo, error)
	AddSwitch(ctx context.Context, in *SwitchInfo, opts ...grpc.CallOption) (*SwitchId, error)
	RemoveSwitch(ctx context.Context, in *SwitchId, opts ...grpc.CallOption) (*ReqBool, error)
}

type vMInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewVMInfoClient(cc grpc.ClientConnInterface) VMInfoClient {
	return &vMInfoClient{cc}
}

func (c *vMInfoClient) AddVM(ctx context.Context, in *VMConfig, opts ...grpc.CallOption) (*VMID, error) {
	out := new(VMID)
	err := c.cc.Invoke(ctx, VMInfo_AddVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVMs(ctx context.Context, in *VMsQuery, opts ...grpc.CallOption) (VMInfo_GetVMsClient, error) {
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[0], VMInfo_GetVMs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetVMsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetVMsClient interface {
	Recv() (*VMID, error)
	grpc.ClientStream
}

type vMInfoGetVMsClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetVMsClient) Recv() (*VMID, error) {
	m := new(VMID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetVMConfig(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMConfig, error) {
	out := new(VMConfig)
	err := c.cc.Invoke(ctx, VMInfo_GetVMConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVMState(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMState, error) {
	out := new(VMState)
	err := c.cc.Invoke(ctx, VMInfo_GetVMState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) UpdateVM(ctx context.Context, in *VMConfig, opts ...grpc.CallOption) (*ReqBool, error) {
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_UpdateVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) StartVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*RequestID, error) {
	out := new(RequestID)
	err := c.cc.Invoke(ctx, VMInfo_StartVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) StopVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*RequestID, error) {
	out := new(RequestID)
	err := c.cc.Invoke(ctx, VMInfo_StopVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) DeleteVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*RequestID, error) {
	out := new(RequestID)
	err := c.cc.Invoke(ctx, VMInfo_DeleteVM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) ClearUEFIState(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*ReqBool, error) {
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_ClearUEFIState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) RequestStatus(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*ReqStatus, error) {
	out := new(ReqStatus)
	err := c.cc.Invoke(ctx, VMInfo_RequestStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetKeyboardLayouts(ctx context.Context, in *KbdQuery, opts ...grpc.CallOption) (VMInfo_GetKeyboardLayoutsClient, error) {
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[1], VMInfo_GetKeyboardLayouts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetKeyboardLayoutsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetKeyboardLayoutsClient interface {
	Recv() (*KbdLayout, error)
	grpc.ClientStream
}

type vMInfoGetKeyboardLayoutsClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetKeyboardLayoutsClient) Recv() (*KbdLayout, error) {
	m := new(KbdLayout)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetISOs(ctx context.Context, in *ISOsQuery, opts ...grpc.CallOption) (VMInfo_GetISOsClient, error) {
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[2], VMInfo_GetISOs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetISOsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetISOsClient interface {
	Recv() (*ISOID, error)
	grpc.ClientStream
}

type vMInfoGetISOsClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetISOsClient) Recv() (*ISOID, error) {
	m := new(ISOID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetISOInfo(ctx context.Context, in *ISOID, opts ...grpc.CallOption) (*ISOInfo, error) {
	out := new(ISOInfo)
	err := c.cc.Invoke(ctx, VMInfo_GetISOInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) AddISO(ctx context.Context, in *ISOInfo, opts ...grpc.CallOption) (*ISOID, error) {
	out := new(ISOID)
	err := c.cc.Invoke(ctx, VMInfo_AddISO_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) SetVmISOs(ctx context.Context, in *SetISOReq, opts ...grpc.CallOption) (*ReqBool, error) {
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_SetVmISOs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVmISOs(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VMInfo_GetVmISOsClient, error) {
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[3], VMInfo_GetVmISOs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetVmISOsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetVmISOsClient interface {
	Recv() (*ISOID, error)
	grpc.ClientStream
}

type vMInfoGetVmISOsClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetVmISOsClient) Recv() (*ISOID, error) {
	m := new(ISOID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetDisks(ctx context.Context, in *DisksQuery, opts ...grpc.CallOption) (VMInfo_GetDisksClient, error) {
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[4], VMInfo_GetDisks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetDisksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetDisksClient interface {
	Recv() (*DiskId, error)
	grpc.ClientStream
}

type vMInfoGetDisksClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetDisksClient) Recv() (*DiskId, error) {
	m := new(DiskId)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetDiskInfo(ctx context.Context, in *DiskId, opts ...grpc.CallOption) (*DiskInfo, error) {
	out := new(DiskInfo)
	err := c.cc.Invoke(ctx, VMInfo_GetDiskInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) AddDisk(ctx context.Context, in *DiskInfo, opts ...grpc.CallOption) (*DiskId, error) {
	out := new(DiskId)
	err := c.cc.Invoke(ctx, VMInfo_AddDisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) RemoveDisk(ctx context.Context, in *DiskId, opts ...grpc.CallOption) (*ReqBool, error) {
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_RemoveDisk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) SetVmDisks(ctx context.Context, in *SetDiskReq, opts ...grpc.CallOption) (*ReqBool, error) {
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_SetVmDisks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVmDisks(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VMInfo_GetVmDisksClient, error) {
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[5], VMInfo_GetVmDisks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetVmDisksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetVmDisksClient interface {
	Recv() (*DiskId, error)
	grpc.ClientStream
}

type vMInfoGetVmDisksClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetVmDisksClient) Recv() (*DiskId, error) {
	m := new(DiskId)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetSwitches(ctx context.Context, in *SwitchesQuery, opts ...grpc.CallOption) (VMInfo_GetSwitchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[6], VMInfo_GetSwitches_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetSwitchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetSwitchesClient interface {
	Recv() (*SwitchId, error)
	grpc.ClientStream
}

type vMInfoGetSwitchesClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetSwitchesClient) Recv() (*SwitchId, error) {
	m := new(SwitchId)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetSwitchInfo(ctx context.Context, in *SwitchId, opts ...grpc.CallOption) (*SwitchInfo, error) {
	out := new(SwitchInfo)
	err := c.cc.Invoke(ctx, VMInfo_GetSwitchInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) AddSwitch(ctx context.Context, in *SwitchInfo, opts ...grpc.CallOption) (*SwitchId, error) {
	out := new(SwitchId)
	err := c.cc.Invoke(ctx, VMInfo_AddSwitch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) RemoveSwitch(ctx context.Context, in *SwitchId, opts ...grpc.CallOption) (*ReqBool, error) {
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_RemoveSwitch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMInfoServer is the server API for VMInfo service.
// All implementations must embed UnimplementedVMInfoServer
// for forward compatibility
type VMInfoServer interface {
	AddVM(context.Context, *VMConfig) (*VMID, error)
	GetVMs(*VMsQuery, VMInfo_GetVMsServer) error
	GetVMConfig(context.Context, *VMID) (*VMConfig, error)
	GetVMState(context.Context, *VMID) (*VMState, error)
	UpdateVM(context.Context, *VMConfig) (*ReqBool, error)
	StartVM(context.Context, *VMID) (*RequestID, error)
	StopVM(context.Context, *VMID) (*RequestID, error)
	DeleteVM(context.Context, *VMID) (*RequestID, error)
	ClearUEFIState(context.Context, *VMID) (*ReqBool, error)
	RequestStatus(context.Context, *RequestID) (*ReqStatus, error)
	GetKeyboardLayouts(*KbdQuery, VMInfo_GetKeyboardLayoutsServer) error
	GetISOs(*ISOsQuery, VMInfo_GetISOsServer) error
	GetISOInfo(context.Context, *ISOID) (*ISOInfo, error)
	AddISO(context.Context, *ISOInfo) (*ISOID, error)
	SetVmISOs(context.Context, *SetISOReq) (*ReqBool, error)
	GetVmISOs(*VMID, VMInfo_GetVmISOsServer) error
	GetDisks(*DisksQuery, VMInfo_GetDisksServer) error
	GetDiskInfo(context.Context, *DiskId) (*DiskInfo, error)
	AddDisk(context.Context, *DiskInfo) (*DiskId, error)
	RemoveDisk(context.Context, *DiskId) (*ReqBool, error)
	SetVmDisks(context.Context, *SetDiskReq) (*ReqBool, error)
	GetVmDisks(*VMID, VMInfo_GetVmDisksServer) error
	GetSwitches(*SwitchesQuery, VMInfo_GetSwitchesServer) error
	GetSwitchInfo(context.Context, *SwitchId) (*SwitchInfo, error)
	AddSwitch(context.Context, *SwitchInfo) (*SwitchId, error)
	RemoveSwitch(context.Context, *SwitchId) (*ReqBool, error)
	mustEmbedUnimplementedVMInfoServer()
}

// UnimplementedVMInfoServer must be embedded to have forward compatible implementations.
type UnimplementedVMInfoServer struct {
}

func (UnimplementedVMInfoServer) AddVM(context.Context, *VMConfig) (*VMID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVM not implemented")
}
func (UnimplementedVMInfoServer) GetVMs(*VMsQuery, VMInfo_GetVMsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVMs not implemented")
}
func (UnimplementedVMInfoServer) GetVMConfig(context.Context, *VMID) (*VMConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMConfig not implemented")
}
func (UnimplementedVMInfoServer) GetVMState(context.Context, *VMID) (*VMState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMState not implemented")
}
func (UnimplementedVMInfoServer) UpdateVM(context.Context, *VMConfig) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVM not implemented")
}
func (UnimplementedVMInfoServer) StartVM(context.Context, *VMID) (*RequestID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVM not implemented")
}
func (UnimplementedVMInfoServer) StopVM(context.Context, *VMID) (*RequestID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVM not implemented")
}
func (UnimplementedVMInfoServer) DeleteVM(context.Context, *VMID) (*RequestID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVM not implemented")
}
func (UnimplementedVMInfoServer) ClearUEFIState(context.Context, *VMID) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUEFIState not implemented")
}
func (UnimplementedVMInfoServer) RequestStatus(context.Context, *RequestID) (*ReqStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestStatus not implemented")
}
func (UnimplementedVMInfoServer) GetKeyboardLayouts(*KbdQuery, VMInfo_GetKeyboardLayoutsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetKeyboardLayouts not implemented")
}
func (UnimplementedVMInfoServer) GetISOs(*ISOsQuery, VMInfo_GetISOsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetISOs not implemented")
}
func (UnimplementedVMInfoServer) GetISOInfo(context.Context, *ISOID) (*ISOInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetISOInfo not implemented")
}
func (UnimplementedVMInfoServer) AddISO(context.Context, *ISOInfo) (*ISOID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddISO not implemented")
}
func (UnimplementedVMInfoServer) SetVmISOs(context.Context, *SetISOReq) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVmISOs not implemented")
}
func (UnimplementedVMInfoServer) GetVmISOs(*VMID, VMInfo_GetVmISOsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVmISOs not implemented")
}
func (UnimplementedVMInfoServer) GetDisks(*DisksQuery, VMInfo_GetDisksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDisks not implemented")
}
func (UnimplementedVMInfoServer) GetDiskInfo(context.Context, *DiskId) (*DiskInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskInfo not implemented")
}
func (UnimplementedVMInfoServer) AddDisk(context.Context, *DiskInfo) (*DiskId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDisk not implemented")
}
func (UnimplementedVMInfoServer) RemoveDisk(context.Context, *DiskId) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDisk not implemented")
}
func (UnimplementedVMInfoServer) SetVmDisks(context.Context, *SetDiskReq) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVmDisks not implemented")
}
func (UnimplementedVMInfoServer) GetVmDisks(*VMID, VMInfo_GetVmDisksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVmDisks not implemented")
}
func (UnimplementedVMInfoServer) GetSwitches(*SwitchesQuery, VMInfo_GetSwitchesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSwitches not implemented")
}
func (UnimplementedVMInfoServer) GetSwitchInfo(context.Context, *SwitchId) (*SwitchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchInfo not implemented")
}
func (UnimplementedVMInfoServer) AddSwitch(context.Context, *SwitchInfo) (*SwitchId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSwitch not implemented")
}
func (UnimplementedVMInfoServer) RemoveSwitch(context.Context, *SwitchId) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSwitch not implemented")
}
func (UnimplementedVMInfoServer) mustEmbedUnimplementedVMInfoServer() {}

// UnsafeVMInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMInfoServer will
// result in compilation errors.
type UnsafeVMInfoServer interface {
	mustEmbedUnimplementedVMInfoServer()
}

func RegisterVMInfoServer(s grpc.ServiceRegistrar, srv VMInfoServer) {
	s.RegisterService(&VMInfo_ServiceDesc, srv)
}

func _VMInfo_AddVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).AddVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_AddVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).AddVM(ctx, req.(*VMConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVMs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMsQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetVMs(m, &vMInfoGetVMsServer{stream})
}

type VMInfo_GetVMsServer interface {
	Send(*VMID) error
	grpc.ServerStream
}

type vMInfoGetVMsServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetVMsServer) Send(m *VMID) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetVMConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetVMConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetVMConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetVMConfig(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVMState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetVMState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetVMState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetVMState(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_UpdateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).UpdateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_UpdateVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).UpdateVM(ctx, req.(*VMConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_StartVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).StartVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_StopVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).StopVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_DeleteVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).DeleteVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_DeleteVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).DeleteVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_ClearUEFIState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).ClearUEFIState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_ClearUEFIState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).ClearUEFIState(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_RequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).RequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_RequestStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).RequestStatus(ctx, req.(*RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetKeyboardLayouts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KbdQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetKeyboardLayouts(m, &vMInfoGetKeyboardLayoutsServer{stream})
}

type VMInfo_GetKeyboardLayoutsServer interface {
	Send(*KbdLayout) error
	grpc.ServerStream
}

type vMInfoGetKeyboardLayoutsServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetKeyboardLayoutsServer) Send(m *KbdLayout) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetISOs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ISOsQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetISOs(m, &vMInfoGetISOsServer{stream})
}

type VMInfo_GetISOsServer interface {
	Send(*ISOID) error
	grpc.ServerStream
}

type vMInfoGetISOsServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetISOsServer) Send(m *ISOID) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetISOInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ISOID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetISOInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetISOInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetISOInfo(ctx, req.(*ISOID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_AddISO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ISOInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).AddISO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_AddISO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).AddISO(ctx, req.(*ISOInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_SetVmISOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetISOReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).SetVmISOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_SetVmISOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).SetVmISOs(ctx, req.(*SetISOReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVmISOs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetVmISOs(m, &vMInfoGetVmISOsServer{stream})
}

type VMInfo_GetVmISOsServer interface {
	Send(*ISOID) error
	grpc.ServerStream
}

type vMInfoGetVmISOsServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetVmISOsServer) Send(m *ISOID) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetDisks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DisksQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetDisks(m, &vMInfoGetDisksServer{stream})
}

type VMInfo_GetDisksServer interface {
	Send(*DiskId) error
	grpc.ServerStream
}

type vMInfoGetDisksServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetDisksServer) Send(m *DiskId) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetDiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetDiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetDiskInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetDiskInfo(ctx, req.(*DiskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_AddDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).AddDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_AddDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).AddDisk(ctx, req.(*DiskInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_RemoveDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).RemoveDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_RemoveDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).RemoveDisk(ctx, req.(*DiskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_SetVmDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).SetVmDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_SetVmDisks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).SetVmDisks(ctx, req.(*SetDiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVmDisks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetVmDisks(m, &vMInfoGetVmDisksServer{stream})
}

type VMInfo_GetVmDisksServer interface {
	Send(*DiskId) error
	grpc.ServerStream
}

type vMInfoGetVmDisksServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetVmDisksServer) Send(m *DiskId) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetSwitches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SwitchesQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetSwitches(m, &vMInfoGetSwitchesServer{stream})
}

type VMInfo_GetSwitchesServer interface {
	Send(*SwitchId) error
	grpc.ServerStream
}

type vMInfoGetSwitchesServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetSwitchesServer) Send(m *SwitchId) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetSwitchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetSwitchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetSwitchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetSwitchInfo(ctx, req.(*SwitchId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_AddSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).AddSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_AddSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).AddSwitch(ctx, req.(*SwitchInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_RemoveSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).RemoveSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_RemoveSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).RemoveSwitch(ctx, req.(*SwitchId))
	}
	return interceptor(ctx, in, info, handler)
}

// VMInfo_ServiceDesc is the grpc.ServiceDesc for VMInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cirrina.VMInfo",
	HandlerType: (*VMInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVM",
			Handler:    _VMInfo_AddVM_Handler,
		},
		{
			MethodName: "GetVMConfig",
			Handler:    _VMInfo_GetVMConfig_Handler,
		},
		{
			MethodName: "GetVMState",
			Handler:    _VMInfo_GetVMState_Handler,
		},
		{
			MethodName: "UpdateVM",
			Handler:    _VMInfo_UpdateVM_Handler,
		},
		{
			MethodName: "StartVM",
			Handler:    _VMInfo_StartVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _VMInfo_StopVM_Handler,
		},
		{
			MethodName: "DeleteVM",
			Handler:    _VMInfo_DeleteVM_Handler,
		},
		{
			MethodName: "ClearUEFIState",
			Handler:    _VMInfo_ClearUEFIState_Handler,
		},
		{
			MethodName: "RequestStatus",
			Handler:    _VMInfo_RequestStatus_Handler,
		},
		{
			MethodName: "GetISOInfo",
			Handler:    _VMInfo_GetISOInfo_Handler,
		},
		{
			MethodName: "AddISO",
			Handler:    _VMInfo_AddISO_Handler,
		},
		{
			MethodName: "SetVmISOs",
			Handler:    _VMInfo_SetVmISOs_Handler,
		},
		{
			MethodName: "GetDiskInfo",
			Handler:    _VMInfo_GetDiskInfo_Handler,
		},
		{
			MethodName: "AddDisk",
			Handler:    _VMInfo_AddDisk_Handler,
		},
		{
			MethodName: "RemoveDisk",
			Handler:    _VMInfo_RemoveDisk_Handler,
		},
		{
			MethodName: "SetVmDisks",
			Handler:    _VMInfo_SetVmDisks_Handler,
		},
		{
			MethodName: "GetSwitchInfo",
			Handler:    _VMInfo_GetSwitchInfo_Handler,
		},
		{
			MethodName: "AddSwitch",
			Handler:    _VMInfo_AddSwitch_Handler,
		},
		{
			MethodName: "RemoveSwitch",
			Handler:    _VMInfo_RemoveSwitch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVMs",
			Handler:       _VMInfo_GetVMs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetKeyboardLayouts",
			Handler:       _VMInfo_GetKeyboardLayouts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetISOs",
			Handler:       _VMInfo_GetISOs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVmISOs",
			Handler:       _VMInfo_GetVmISOs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDisks",
			Handler:       _VMInfo_GetDisks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVmDisks",
			Handler:       _VMInfo_GetVmDisks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSwitches",
			Handler:       _VMInfo_GetSwitches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cirrina.proto",
}
