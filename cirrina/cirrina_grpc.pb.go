// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.24.4
// source: cirrina.proto

package cirrina

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	VMInfo_AddVM_FullMethodName              = "/cirrina.VMInfo/AddVM"
	VMInfo_GetVMs_FullMethodName             = "/cirrina.VMInfo/GetVMs"
	VMInfo_GetVMConfig_FullMethodName        = "/cirrina.VMInfo/GetVMConfig"
	VMInfo_GetVMName_FullMethodName          = "/cirrina.VMInfo/GetVMName"
	VMInfo_GetVMID_FullMethodName            = "/cirrina.VMInfo/GetVMID"
	VMInfo_GetVMState_FullMethodName         = "/cirrina.VMInfo/GetVMState"
	VMInfo_UpdateVM_FullMethodName           = "/cirrina.VMInfo/UpdateVM"
	VMInfo_StartVM_FullMethodName            = "/cirrina.VMInfo/StartVM"
	VMInfo_StopVM_FullMethodName             = "/cirrina.VMInfo/StopVM"
	VMInfo_DeleteVM_FullMethodName           = "/cirrina.VMInfo/DeleteVM"
	VMInfo_ClearUEFIState_FullMethodName     = "/cirrina.VMInfo/ClearUEFIState"
	VMInfo_GetVersion_FullMethodName         = "/cirrina.VMInfo/GetVersion"
	VMInfo_GetNetInterfaces_FullMethodName   = "/cirrina.VMInfo/GetNetInterfaces"
	VMInfo_RequestStatus_FullMethodName      = "/cirrina.VMInfo/RequestStatus"
	VMInfo_GetKeyboardLayouts_FullMethodName = "/cirrina.VMInfo/GetKeyboardLayouts"
	VMInfo_GetISOs_FullMethodName            = "/cirrina.VMInfo/GetISOs"
	VMInfo_GetISOInfo_FullMethodName         = "/cirrina.VMInfo/GetISOInfo"
	VMInfo_AddISO_FullMethodName             = "/cirrina.VMInfo/AddISO"
	VMInfo_RemoveISO_FullMethodName          = "/cirrina.VMInfo/RemoveISO"
	VMInfo_SetVMISOs_FullMethodName          = "/cirrina.VMInfo/SetVMISOs"
	VMInfo_GetVMISOs_FullMethodName          = "/cirrina.VMInfo/GetVMISOs"
	VMInfo_UploadIso_FullMethodName          = "/cirrina.VMInfo/UploadIso"
	VMInfo_GetDisks_FullMethodName           = "/cirrina.VMInfo/GetDisks"
	VMInfo_GetDiskInfo_FullMethodName        = "/cirrina.VMInfo/GetDiskInfo"
	VMInfo_SetDiskInfo_FullMethodName        = "/cirrina.VMInfo/SetDiskInfo"
	VMInfo_AddDisk_FullMethodName            = "/cirrina.VMInfo/AddDisk"
	VMInfo_RemoveDisk_FullMethodName         = "/cirrina.VMInfo/RemoveDisk"
	VMInfo_SetVMDisks_FullMethodName         = "/cirrina.VMInfo/SetVMDisks"
	VMInfo_GetVMDisks_FullMethodName         = "/cirrina.VMInfo/GetVMDisks"
	VMInfo_GetDiskVM_FullMethodName          = "/cirrina.VMInfo/GetDiskVM"
	VMInfo_UploadDisk_FullMethodName         = "/cirrina.VMInfo/UploadDisk"
	VMInfo_GetSwitches_FullMethodName        = "/cirrina.VMInfo/GetSwitches"
	VMInfo_GetSwitchInfo_FullMethodName      = "/cirrina.VMInfo/GetSwitchInfo"
	VMInfo_AddSwitch_FullMethodName          = "/cirrina.VMInfo/AddSwitch"
	VMInfo_SetSwitchInfo_FullMethodName      = "/cirrina.VMInfo/SetSwitchInfo"
	VMInfo_RemoveSwitch_FullMethodName       = "/cirrina.VMInfo/RemoveSwitch"
	VMInfo_SetSwitchUplink_FullMethodName    = "/cirrina.VMInfo/SetSwitchUplink"
	VMInfo_GetVMNicsAll_FullMethodName       = "/cirrina.VMInfo/GetVMNicsAll"
	VMInfo_GetVMNicInfo_FullMethodName       = "/cirrina.VMInfo/GetVMNicInfo"
	VMInfo_AddVMNic_FullMethodName           = "/cirrina.VMInfo/AddVMNic"
	VMInfo_UpdateVMNic_FullMethodName        = "/cirrina.VMInfo/UpdateVMNic"
	VMInfo_RemoveVMNic_FullMethodName        = "/cirrina.VMInfo/RemoveVMNic"
	VMInfo_SetVMNicSwitch_FullMethodName     = "/cirrina.VMInfo/SetVMNicSwitch"
	VMInfo_GetVMNicVM_FullMethodName         = "/cirrina.VMInfo/GetVMNicVM"
	VMInfo_CloneVMNic_FullMethodName         = "/cirrina.VMInfo/CloneVMNic"
	VMInfo_SetVMNics_FullMethodName          = "/cirrina.VMInfo/SetVMNics"
	VMInfo_GetVMNics_FullMethodName          = "/cirrina.VMInfo/GetVMNics"
	VMInfo_Com1Interactive_FullMethodName    = "/cirrina.VMInfo/Com1Interactive"
	VMInfo_Com2Interactive_FullMethodName    = "/cirrina.VMInfo/Com2Interactive"
	VMInfo_Com3Interactive_FullMethodName    = "/cirrina.VMInfo/Com3Interactive"
	VMInfo_Com4Interactive_FullMethodName    = "/cirrina.VMInfo/Com4Interactive"
)

// VMInfoClient is the client API for VMInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMInfoClient interface {
	AddVM(ctx context.Context, in *VMConfig, opts ...grpc.CallOption) (*VMID, error)
	GetVMs(ctx context.Context, in *VMsQuery, opts ...grpc.CallOption) (VMInfo_GetVMsClient, error)
	GetVMConfig(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMConfig, error)
	GetVMName(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	GetVMID(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*VMID, error)
	GetVMState(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMState, error)
	UpdateVM(ctx context.Context, in *VMConfig, opts ...grpc.CallOption) (*ReqBool, error)
	StartVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*RequestID, error)
	StopVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*RequestID, error)
	DeleteVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*RequestID, error)
	ClearUEFIState(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*ReqBool, error)
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	GetNetInterfaces(ctx context.Context, in *NetInterfacesReq, opts ...grpc.CallOption) (VMInfo_GetNetInterfacesClient, error)
	RequestStatus(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*ReqStatus, error)
	GetKeyboardLayouts(ctx context.Context, in *KbdQuery, opts ...grpc.CallOption) (VMInfo_GetKeyboardLayoutsClient, error)
	GetISOs(ctx context.Context, in *ISOsQuery, opts ...grpc.CallOption) (VMInfo_GetISOsClient, error)
	GetISOInfo(ctx context.Context, in *ISOID, opts ...grpc.CallOption) (*ISOInfo, error)
	AddISO(ctx context.Context, in *ISOInfo, opts ...grpc.CallOption) (*ISOID, error)
	RemoveISO(ctx context.Context, in *ISOID, opts ...grpc.CallOption) (*ReqBool, error)
	SetVMISOs(ctx context.Context, in *SetISOReq, opts ...grpc.CallOption) (*ReqBool, error)
	GetVMISOs(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VMInfo_GetVMISOsClient, error)
	UploadIso(ctx context.Context, opts ...grpc.CallOption) (VMInfo_UploadIsoClient, error)
	GetDisks(ctx context.Context, in *DisksQuery, opts ...grpc.CallOption) (VMInfo_GetDisksClient, error)
	GetDiskInfo(ctx context.Context, in *DiskId, opts ...grpc.CallOption) (*DiskInfo, error)
	SetDiskInfo(ctx context.Context, in *DiskInfoUpdate, opts ...grpc.CallOption) (*ReqBool, error)
	AddDisk(ctx context.Context, in *DiskInfo, opts ...grpc.CallOption) (*DiskId, error)
	RemoveDisk(ctx context.Context, in *DiskId, opts ...grpc.CallOption) (*ReqBool, error)
	SetVMDisks(ctx context.Context, in *SetDiskReq, opts ...grpc.CallOption) (*ReqBool, error)
	GetVMDisks(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VMInfo_GetVMDisksClient, error)
	GetDiskVM(ctx context.Context, in *DiskId, opts ...grpc.CallOption) (*VMID, error)
	UploadDisk(ctx context.Context, opts ...grpc.CallOption) (VMInfo_UploadDiskClient, error)
	GetSwitches(ctx context.Context, in *SwitchesQuery, opts ...grpc.CallOption) (VMInfo_GetSwitchesClient, error)
	GetSwitchInfo(ctx context.Context, in *SwitchId, opts ...grpc.CallOption) (*SwitchInfo, error)
	AddSwitch(ctx context.Context, in *SwitchInfo, opts ...grpc.CallOption) (*SwitchId, error)
	SetSwitchInfo(ctx context.Context, in *SwitchInfoUpdate, opts ...grpc.CallOption) (*ReqBool, error)
	RemoveSwitch(ctx context.Context, in *SwitchId, opts ...grpc.CallOption) (*ReqBool, error)
	SetSwitchUplink(ctx context.Context, in *SwitchUplinkReq, opts ...grpc.CallOption) (*ReqBool, error)
	GetVMNicsAll(ctx context.Context, in *VmNicsQuery, opts ...grpc.CallOption) (VMInfo_GetVMNicsAllClient, error)
	GetVMNicInfo(ctx context.Context, in *VmNicId, opts ...grpc.CallOption) (*VmNicInfo, error)
	AddVMNic(ctx context.Context, in *VmNicInfo, opts ...grpc.CallOption) (*VmNicId, error)
	UpdateVMNic(ctx context.Context, in *VmNicInfoUpdate, opts ...grpc.CallOption) (*ReqBool, error)
	RemoveVMNic(ctx context.Context, in *VmNicId, opts ...grpc.CallOption) (*ReqBool, error)
	SetVMNicSwitch(ctx context.Context, in *SetVmNicSwitchReq, opts ...grpc.CallOption) (*ReqBool, error)
	GetVMNicVM(ctx context.Context, in *VmNicId, opts ...grpc.CallOption) (*VMID, error)
	CloneVMNic(ctx context.Context, in *VmNicCloneReq, opts ...grpc.CallOption) (*RequestID, error)
	SetVMNics(ctx context.Context, in *SetNicReq, opts ...grpc.CallOption) (*ReqBool, error)
	GetVMNics(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VMInfo_GetVMNicsClient, error)
	Com1Interactive(ctx context.Context, opts ...grpc.CallOption) (VMInfo_Com1InteractiveClient, error)
	Com2Interactive(ctx context.Context, opts ...grpc.CallOption) (VMInfo_Com2InteractiveClient, error)
	Com3Interactive(ctx context.Context, opts ...grpc.CallOption) (VMInfo_Com3InteractiveClient, error)
	Com4Interactive(ctx context.Context, opts ...grpc.CallOption) (VMInfo_Com4InteractiveClient, error)
}

type vMInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewVMInfoClient(cc grpc.ClientConnInterface) VMInfoClient {
	return &vMInfoClient{cc}
}

func (c *vMInfoClient) AddVM(ctx context.Context, in *VMConfig, opts ...grpc.CallOption) (*VMID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VMID)
	err := c.cc.Invoke(ctx, VMInfo_AddVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVMs(ctx context.Context, in *VMsQuery, opts ...grpc.CallOption) (VMInfo_GetVMsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[0], VMInfo_GetVMs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetVMsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetVMsClient interface {
	Recv() (*VMID, error)
	grpc.ClientStream
}

type vMInfoGetVMsClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetVMsClient) Recv() (*VMID, error) {
	m := new(VMID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetVMConfig(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VMConfig)
	err := c.cc.Invoke(ctx, VMInfo_GetVMConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVMName(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, VMInfo_GetVMName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVMID(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*VMID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VMID)
	err := c.cc.Invoke(ctx, VMInfo_GetVMID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVMState(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*VMState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VMState)
	err := c.cc.Invoke(ctx, VMInfo_GetVMState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) UpdateVM(ctx context.Context, in *VMConfig, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_UpdateVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) StartVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*RequestID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestID)
	err := c.cc.Invoke(ctx, VMInfo_StartVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) StopVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*RequestID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestID)
	err := c.cc.Invoke(ctx, VMInfo_StopVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) DeleteVM(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*RequestID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestID)
	err := c.cc.Invoke(ctx, VMInfo_DeleteVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) ClearUEFIState(ctx context.Context, in *VMID, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_ClearUEFIState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, VMInfo_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetNetInterfaces(ctx context.Context, in *NetInterfacesReq, opts ...grpc.CallOption) (VMInfo_GetNetInterfacesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[1], VMInfo_GetNetInterfaces_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetNetInterfacesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetNetInterfacesClient interface {
	Recv() (*NetIf, error)
	grpc.ClientStream
}

type vMInfoGetNetInterfacesClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetNetInterfacesClient) Recv() (*NetIf, error) {
	m := new(NetIf)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) RequestStatus(ctx context.Context, in *RequestID, opts ...grpc.CallOption) (*ReqStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqStatus)
	err := c.cc.Invoke(ctx, VMInfo_RequestStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetKeyboardLayouts(ctx context.Context, in *KbdQuery, opts ...grpc.CallOption) (VMInfo_GetKeyboardLayoutsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[2], VMInfo_GetKeyboardLayouts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetKeyboardLayoutsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetKeyboardLayoutsClient interface {
	Recv() (*KbdLayout, error)
	grpc.ClientStream
}

type vMInfoGetKeyboardLayoutsClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetKeyboardLayoutsClient) Recv() (*KbdLayout, error) {
	m := new(KbdLayout)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetISOs(ctx context.Context, in *ISOsQuery, opts ...grpc.CallOption) (VMInfo_GetISOsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[3], VMInfo_GetISOs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetISOsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetISOsClient interface {
	Recv() (*ISOID, error)
	grpc.ClientStream
}

type vMInfoGetISOsClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetISOsClient) Recv() (*ISOID, error) {
	m := new(ISOID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetISOInfo(ctx context.Context, in *ISOID, opts ...grpc.CallOption) (*ISOInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ISOInfo)
	err := c.cc.Invoke(ctx, VMInfo_GetISOInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) AddISO(ctx context.Context, in *ISOInfo, opts ...grpc.CallOption) (*ISOID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ISOID)
	err := c.cc.Invoke(ctx, VMInfo_AddISO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) RemoveISO(ctx context.Context, in *ISOID, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_RemoveISO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) SetVMISOs(ctx context.Context, in *SetISOReq, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_SetVMISOs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVMISOs(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VMInfo_GetVMISOsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[4], VMInfo_GetVMISOs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetVMISOsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetVMISOsClient interface {
	Recv() (*ISOID, error)
	grpc.ClientStream
}

type vMInfoGetVMISOsClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetVMISOsClient) Recv() (*ISOID, error) {
	m := new(ISOID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) UploadIso(ctx context.Context, opts ...grpc.CallOption) (VMInfo_UploadIsoClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[5], VMInfo_UploadIso_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoUploadIsoClient{ClientStream: stream}
	return x, nil
}

type VMInfo_UploadIsoClient interface {
	Send(*ISOImageRequest) error
	CloseAndRecv() (*ReqBool, error)
	grpc.ClientStream
}

type vMInfoUploadIsoClient struct {
	grpc.ClientStream
}

func (x *vMInfoUploadIsoClient) Send(m *ISOImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vMInfoUploadIsoClient) CloseAndRecv() (*ReqBool, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReqBool)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetDisks(ctx context.Context, in *DisksQuery, opts ...grpc.CallOption) (VMInfo_GetDisksClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[6], VMInfo_GetDisks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetDisksClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetDisksClient interface {
	Recv() (*DiskId, error)
	grpc.ClientStream
}

type vMInfoGetDisksClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetDisksClient) Recv() (*DiskId, error) {
	m := new(DiskId)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetDiskInfo(ctx context.Context, in *DiskId, opts ...grpc.CallOption) (*DiskInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiskInfo)
	err := c.cc.Invoke(ctx, VMInfo_GetDiskInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) SetDiskInfo(ctx context.Context, in *DiskInfoUpdate, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_SetDiskInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) AddDisk(ctx context.Context, in *DiskInfo, opts ...grpc.CallOption) (*DiskId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiskId)
	err := c.cc.Invoke(ctx, VMInfo_AddDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) RemoveDisk(ctx context.Context, in *DiskId, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_RemoveDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) SetVMDisks(ctx context.Context, in *SetDiskReq, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_SetVMDisks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVMDisks(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VMInfo_GetVMDisksClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[7], VMInfo_GetVMDisks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetVMDisksClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetVMDisksClient interface {
	Recv() (*DiskId, error)
	grpc.ClientStream
}

type vMInfoGetVMDisksClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetVMDisksClient) Recv() (*DiskId, error) {
	m := new(DiskId)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetDiskVM(ctx context.Context, in *DiskId, opts ...grpc.CallOption) (*VMID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VMID)
	err := c.cc.Invoke(ctx, VMInfo_GetDiskVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) UploadDisk(ctx context.Context, opts ...grpc.CallOption) (VMInfo_UploadDiskClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[8], VMInfo_UploadDisk_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoUploadDiskClient{ClientStream: stream}
	return x, nil
}

type VMInfo_UploadDiskClient interface {
	Send(*DiskImageRequest) error
	CloseAndRecv() (*ReqBool, error)
	grpc.ClientStream
}

type vMInfoUploadDiskClient struct {
	grpc.ClientStream
}

func (x *vMInfoUploadDiskClient) Send(m *DiskImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vMInfoUploadDiskClient) CloseAndRecv() (*ReqBool, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReqBool)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetSwitches(ctx context.Context, in *SwitchesQuery, opts ...grpc.CallOption) (VMInfo_GetSwitchesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[9], VMInfo_GetSwitches_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetSwitchesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetSwitchesClient interface {
	Recv() (*SwitchId, error)
	grpc.ClientStream
}

type vMInfoGetSwitchesClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetSwitchesClient) Recv() (*SwitchId, error) {
	m := new(SwitchId)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetSwitchInfo(ctx context.Context, in *SwitchId, opts ...grpc.CallOption) (*SwitchInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwitchInfo)
	err := c.cc.Invoke(ctx, VMInfo_GetSwitchInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) AddSwitch(ctx context.Context, in *SwitchInfo, opts ...grpc.CallOption) (*SwitchId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwitchId)
	err := c.cc.Invoke(ctx, VMInfo_AddSwitch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) SetSwitchInfo(ctx context.Context, in *SwitchInfoUpdate, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_SetSwitchInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) RemoveSwitch(ctx context.Context, in *SwitchId, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_RemoveSwitch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) SetSwitchUplink(ctx context.Context, in *SwitchUplinkReq, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_SetSwitchUplink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVMNicsAll(ctx context.Context, in *VmNicsQuery, opts ...grpc.CallOption) (VMInfo_GetVMNicsAllClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[10], VMInfo_GetVMNicsAll_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetVMNicsAllClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetVMNicsAllClient interface {
	Recv() (*VmNicId, error)
	grpc.ClientStream
}

type vMInfoGetVMNicsAllClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetVMNicsAllClient) Recv() (*VmNicId, error) {
	m := new(VmNicId)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) GetVMNicInfo(ctx context.Context, in *VmNicId, opts ...grpc.CallOption) (*VmNicInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmNicInfo)
	err := c.cc.Invoke(ctx, VMInfo_GetVMNicInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) AddVMNic(ctx context.Context, in *VmNicInfo, opts ...grpc.CallOption) (*VmNicId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VmNicId)
	err := c.cc.Invoke(ctx, VMInfo_AddVMNic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) UpdateVMNic(ctx context.Context, in *VmNicInfoUpdate, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_UpdateVMNic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) RemoveVMNic(ctx context.Context, in *VmNicId, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_RemoveVMNic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) SetVMNicSwitch(ctx context.Context, in *SetVmNicSwitchReq, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_SetVMNicSwitch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVMNicVM(ctx context.Context, in *VmNicId, opts ...grpc.CallOption) (*VMID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VMID)
	err := c.cc.Invoke(ctx, VMInfo_GetVMNicVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) CloneVMNic(ctx context.Context, in *VmNicCloneReq, opts ...grpc.CallOption) (*RequestID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestID)
	err := c.cc.Invoke(ctx, VMInfo_CloneVMNic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) SetVMNics(ctx context.Context, in *SetNicReq, opts ...grpc.CallOption) (*ReqBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReqBool)
	err := c.cc.Invoke(ctx, VMInfo_SetVMNics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMInfoClient) GetVMNics(ctx context.Context, in *VMID, opts ...grpc.CallOption) (VMInfo_GetVMNicsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[11], VMInfo_GetVMNics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoGetVMNicsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMInfo_GetVMNicsClient interface {
	Recv() (*VmNicId, error)
	grpc.ClientStream
}

type vMInfoGetVMNicsClient struct {
	grpc.ClientStream
}

func (x *vMInfoGetVMNicsClient) Recv() (*VmNicId, error) {
	m := new(VmNicId)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) Com1Interactive(ctx context.Context, opts ...grpc.CallOption) (VMInfo_Com1InteractiveClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[12], VMInfo_Com1Interactive_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoCom1InteractiveClient{ClientStream: stream}
	return x, nil
}

type VMInfo_Com1InteractiveClient interface {
	Send(*ComDataRequest) error
	Recv() (*ComDataResponse, error)
	grpc.ClientStream
}

type vMInfoCom1InteractiveClient struct {
	grpc.ClientStream
}

func (x *vMInfoCom1InteractiveClient) Send(m *ComDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vMInfoCom1InteractiveClient) Recv() (*ComDataResponse, error) {
	m := new(ComDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) Com2Interactive(ctx context.Context, opts ...grpc.CallOption) (VMInfo_Com2InteractiveClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[13], VMInfo_Com2Interactive_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoCom2InteractiveClient{ClientStream: stream}
	return x, nil
}

type VMInfo_Com2InteractiveClient interface {
	Send(*ComDataRequest) error
	Recv() (*ComDataResponse, error)
	grpc.ClientStream
}

type vMInfoCom2InteractiveClient struct {
	grpc.ClientStream
}

func (x *vMInfoCom2InteractiveClient) Send(m *ComDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vMInfoCom2InteractiveClient) Recv() (*ComDataResponse, error) {
	m := new(ComDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) Com3Interactive(ctx context.Context, opts ...grpc.CallOption) (VMInfo_Com3InteractiveClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[14], VMInfo_Com3Interactive_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoCom3InteractiveClient{ClientStream: stream}
	return x, nil
}

type VMInfo_Com3InteractiveClient interface {
	Send(*ComDataRequest) error
	Recv() (*ComDataResponse, error)
	grpc.ClientStream
}

type vMInfoCom3InteractiveClient struct {
	grpc.ClientStream
}

func (x *vMInfoCom3InteractiveClient) Send(m *ComDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vMInfoCom3InteractiveClient) Recv() (*ComDataResponse, error) {
	m := new(ComDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vMInfoClient) Com4Interactive(ctx context.Context, opts ...grpc.CallOption) (VMInfo_Com4InteractiveClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VMInfo_ServiceDesc.Streams[15], VMInfo_Com4Interactive_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &vMInfoCom4InteractiveClient{ClientStream: stream}
	return x, nil
}

type VMInfo_Com4InteractiveClient interface {
	Send(*ComDataRequest) error
	Recv() (*ComDataResponse, error)
	grpc.ClientStream
}

type vMInfoCom4InteractiveClient struct {
	grpc.ClientStream
}

func (x *vMInfoCom4InteractiveClient) Send(m *ComDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vMInfoCom4InteractiveClient) Recv() (*ComDataResponse, error) {
	m := new(ComDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VMInfoServer is the server API for VMInfo service.
// All implementations must embed UnimplementedVMInfoServer
// for forward compatibility
type VMInfoServer interface {
	AddVM(context.Context, *VMConfig) (*VMID, error)
	GetVMs(*VMsQuery, VMInfo_GetVMsServer) error
	GetVMConfig(context.Context, *VMID) (*VMConfig, error)
	GetVMName(context.Context, *VMID) (*wrapperspb.StringValue, error)
	GetVMID(context.Context, *wrapperspb.StringValue) (*VMID, error)
	GetVMState(context.Context, *VMID) (*VMState, error)
	UpdateVM(context.Context, *VMConfig) (*ReqBool, error)
	StartVM(context.Context, *VMID) (*RequestID, error)
	StopVM(context.Context, *VMID) (*RequestID, error)
	DeleteVM(context.Context, *VMID) (*RequestID, error)
	ClearUEFIState(context.Context, *VMID) (*ReqBool, error)
	GetVersion(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	GetNetInterfaces(*NetInterfacesReq, VMInfo_GetNetInterfacesServer) error
	RequestStatus(context.Context, *RequestID) (*ReqStatus, error)
	GetKeyboardLayouts(*KbdQuery, VMInfo_GetKeyboardLayoutsServer) error
	GetISOs(*ISOsQuery, VMInfo_GetISOsServer) error
	GetISOInfo(context.Context, *ISOID) (*ISOInfo, error)
	AddISO(context.Context, *ISOInfo) (*ISOID, error)
	RemoveISO(context.Context, *ISOID) (*ReqBool, error)
	SetVMISOs(context.Context, *SetISOReq) (*ReqBool, error)
	GetVMISOs(*VMID, VMInfo_GetVMISOsServer) error
	UploadIso(VMInfo_UploadIsoServer) error
	GetDisks(*DisksQuery, VMInfo_GetDisksServer) error
	GetDiskInfo(context.Context, *DiskId) (*DiskInfo, error)
	SetDiskInfo(context.Context, *DiskInfoUpdate) (*ReqBool, error)
	AddDisk(context.Context, *DiskInfo) (*DiskId, error)
	RemoveDisk(context.Context, *DiskId) (*ReqBool, error)
	SetVMDisks(context.Context, *SetDiskReq) (*ReqBool, error)
	GetVMDisks(*VMID, VMInfo_GetVMDisksServer) error
	GetDiskVM(context.Context, *DiskId) (*VMID, error)
	UploadDisk(VMInfo_UploadDiskServer) error
	GetSwitches(*SwitchesQuery, VMInfo_GetSwitchesServer) error
	GetSwitchInfo(context.Context, *SwitchId) (*SwitchInfo, error)
	AddSwitch(context.Context, *SwitchInfo) (*SwitchId, error)
	SetSwitchInfo(context.Context, *SwitchInfoUpdate) (*ReqBool, error)
	RemoveSwitch(context.Context, *SwitchId) (*ReqBool, error)
	SetSwitchUplink(context.Context, *SwitchUplinkReq) (*ReqBool, error)
	GetVMNicsAll(*VmNicsQuery, VMInfo_GetVMNicsAllServer) error
	GetVMNicInfo(context.Context, *VmNicId) (*VmNicInfo, error)
	AddVMNic(context.Context, *VmNicInfo) (*VmNicId, error)
	UpdateVMNic(context.Context, *VmNicInfoUpdate) (*ReqBool, error)
	RemoveVMNic(context.Context, *VmNicId) (*ReqBool, error)
	SetVMNicSwitch(context.Context, *SetVmNicSwitchReq) (*ReqBool, error)
	GetVMNicVM(context.Context, *VmNicId) (*VMID, error)
	CloneVMNic(context.Context, *VmNicCloneReq) (*RequestID, error)
	SetVMNics(context.Context, *SetNicReq) (*ReqBool, error)
	GetVMNics(*VMID, VMInfo_GetVMNicsServer) error
	Com1Interactive(VMInfo_Com1InteractiveServer) error
	Com2Interactive(VMInfo_Com2InteractiveServer) error
	Com3Interactive(VMInfo_Com3InteractiveServer) error
	Com4Interactive(VMInfo_Com4InteractiveServer) error
	mustEmbedUnimplementedVMInfoServer()
}

// UnimplementedVMInfoServer must be embedded to have forward compatible implementations.
type UnimplementedVMInfoServer struct {
}

func (UnimplementedVMInfoServer) AddVM(context.Context, *VMConfig) (*VMID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVM not implemented")
}
func (UnimplementedVMInfoServer) GetVMs(*VMsQuery, VMInfo_GetVMsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVMs not implemented")
}
func (UnimplementedVMInfoServer) GetVMConfig(context.Context, *VMID) (*VMConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMConfig not implemented")
}
func (UnimplementedVMInfoServer) GetVMName(context.Context, *VMID) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMName not implemented")
}
func (UnimplementedVMInfoServer) GetVMID(context.Context, *wrapperspb.StringValue) (*VMID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMID not implemented")
}
func (UnimplementedVMInfoServer) GetVMState(context.Context, *VMID) (*VMState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMState not implemented")
}
func (UnimplementedVMInfoServer) UpdateVM(context.Context, *VMConfig) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVM not implemented")
}
func (UnimplementedVMInfoServer) StartVM(context.Context, *VMID) (*RequestID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVM not implemented")
}
func (UnimplementedVMInfoServer) StopVM(context.Context, *VMID) (*RequestID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVM not implemented")
}
func (UnimplementedVMInfoServer) DeleteVM(context.Context, *VMID) (*RequestID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVM not implemented")
}
func (UnimplementedVMInfoServer) ClearUEFIState(context.Context, *VMID) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearUEFIState not implemented")
}
func (UnimplementedVMInfoServer) GetVersion(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedVMInfoServer) GetNetInterfaces(*NetInterfacesReq, VMInfo_GetNetInterfacesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNetInterfaces not implemented")
}
func (UnimplementedVMInfoServer) RequestStatus(context.Context, *RequestID) (*ReqStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestStatus not implemented")
}
func (UnimplementedVMInfoServer) GetKeyboardLayouts(*KbdQuery, VMInfo_GetKeyboardLayoutsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetKeyboardLayouts not implemented")
}
func (UnimplementedVMInfoServer) GetISOs(*ISOsQuery, VMInfo_GetISOsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetISOs not implemented")
}
func (UnimplementedVMInfoServer) GetISOInfo(context.Context, *ISOID) (*ISOInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetISOInfo not implemented")
}
func (UnimplementedVMInfoServer) AddISO(context.Context, *ISOInfo) (*ISOID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddISO not implemented")
}
func (UnimplementedVMInfoServer) RemoveISO(context.Context, *ISOID) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveISO not implemented")
}
func (UnimplementedVMInfoServer) SetVMISOs(context.Context, *SetISOReq) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVMISOs not implemented")
}
func (UnimplementedVMInfoServer) GetVMISOs(*VMID, VMInfo_GetVMISOsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVMISOs not implemented")
}
func (UnimplementedVMInfoServer) UploadIso(VMInfo_UploadIsoServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadIso not implemented")
}
func (UnimplementedVMInfoServer) GetDisks(*DisksQuery, VMInfo_GetDisksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDisks not implemented")
}
func (UnimplementedVMInfoServer) GetDiskInfo(context.Context, *DiskId) (*DiskInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskInfo not implemented")
}
func (UnimplementedVMInfoServer) SetDiskInfo(context.Context, *DiskInfoUpdate) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDiskInfo not implemented")
}
func (UnimplementedVMInfoServer) AddDisk(context.Context, *DiskInfo) (*DiskId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDisk not implemented")
}
func (UnimplementedVMInfoServer) RemoveDisk(context.Context, *DiskId) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDisk not implemented")
}
func (UnimplementedVMInfoServer) SetVMDisks(context.Context, *SetDiskReq) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVMDisks not implemented")
}
func (UnimplementedVMInfoServer) GetVMDisks(*VMID, VMInfo_GetVMDisksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVMDisks not implemented")
}
func (UnimplementedVMInfoServer) GetDiskVM(context.Context, *DiskId) (*VMID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskVM not implemented")
}
func (UnimplementedVMInfoServer) UploadDisk(VMInfo_UploadDiskServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadDisk not implemented")
}
func (UnimplementedVMInfoServer) GetSwitches(*SwitchesQuery, VMInfo_GetSwitchesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSwitches not implemented")
}
func (UnimplementedVMInfoServer) GetSwitchInfo(context.Context, *SwitchId) (*SwitchInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchInfo not implemented")
}
func (UnimplementedVMInfoServer) AddSwitch(context.Context, *SwitchInfo) (*SwitchId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSwitch not implemented")
}
func (UnimplementedVMInfoServer) SetSwitchInfo(context.Context, *SwitchInfoUpdate) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSwitchInfo not implemented")
}
func (UnimplementedVMInfoServer) RemoveSwitch(context.Context, *SwitchId) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSwitch not implemented")
}
func (UnimplementedVMInfoServer) SetSwitchUplink(context.Context, *SwitchUplinkReq) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSwitchUplink not implemented")
}
func (UnimplementedVMInfoServer) GetVMNicsAll(*VmNicsQuery, VMInfo_GetVMNicsAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVMNicsAll not implemented")
}
func (UnimplementedVMInfoServer) GetVMNicInfo(context.Context, *VmNicId) (*VmNicInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMNicInfo not implemented")
}
func (UnimplementedVMInfoServer) AddVMNic(context.Context, *VmNicInfo) (*VmNicId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVMNic not implemented")
}
func (UnimplementedVMInfoServer) UpdateVMNic(context.Context, *VmNicInfoUpdate) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVMNic not implemented")
}
func (UnimplementedVMInfoServer) RemoveVMNic(context.Context, *VmNicId) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVMNic not implemented")
}
func (UnimplementedVMInfoServer) SetVMNicSwitch(context.Context, *SetVmNicSwitchReq) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVMNicSwitch not implemented")
}
func (UnimplementedVMInfoServer) GetVMNicVM(context.Context, *VmNicId) (*VMID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMNicVM not implemented")
}
func (UnimplementedVMInfoServer) CloneVMNic(context.Context, *VmNicCloneReq) (*RequestID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneVMNic not implemented")
}
func (UnimplementedVMInfoServer) SetVMNics(context.Context, *SetNicReq) (*ReqBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVMNics not implemented")
}
func (UnimplementedVMInfoServer) GetVMNics(*VMID, VMInfo_GetVMNicsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVMNics not implemented")
}
func (UnimplementedVMInfoServer) Com1Interactive(VMInfo_Com1InteractiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Com1Interactive not implemented")
}
func (UnimplementedVMInfoServer) Com2Interactive(VMInfo_Com2InteractiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Com2Interactive not implemented")
}
func (UnimplementedVMInfoServer) Com3Interactive(VMInfo_Com3InteractiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Com3Interactive not implemented")
}
func (UnimplementedVMInfoServer) Com4Interactive(VMInfo_Com4InteractiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Com4Interactive not implemented")
}
func (UnimplementedVMInfoServer) mustEmbedUnimplementedVMInfoServer() {}

// UnsafeVMInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMInfoServer will
// result in compilation errors.
type UnsafeVMInfoServer interface {
	mustEmbedUnimplementedVMInfoServer()
}

func RegisterVMInfoServer(s grpc.ServiceRegistrar, srv VMInfoServer) {
	s.RegisterService(&VMInfo_ServiceDesc, srv)
}

func _VMInfo_AddVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).AddVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_AddVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).AddVM(ctx, req.(*VMConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVMs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMsQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetVMs(m, &vMInfoGetVMsServer{ServerStream: stream})
}

type VMInfo_GetVMsServer interface {
	Send(*VMID) error
	grpc.ServerStream
}

type vMInfoGetVMsServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetVMsServer) Send(m *VMID) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetVMConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetVMConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetVMConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetVMConfig(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVMName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetVMName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetVMName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetVMName(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVMID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetVMID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetVMID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetVMID(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVMState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetVMState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetVMState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetVMState(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_UpdateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).UpdateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_UpdateVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).UpdateVM(ctx, req.(*VMConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_StartVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).StartVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_StopVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).StopVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_DeleteVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).DeleteVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_DeleteVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).DeleteVM(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_ClearUEFIState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).ClearUEFIState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_ClearUEFIState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).ClearUEFIState(ctx, req.(*VMID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetNetInterfaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NetInterfacesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetNetInterfaces(m, &vMInfoGetNetInterfacesServer{ServerStream: stream})
}

type VMInfo_GetNetInterfacesServer interface {
	Send(*NetIf) error
	grpc.ServerStream
}

type vMInfoGetNetInterfacesServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetNetInterfacesServer) Send(m *NetIf) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_RequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).RequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_RequestStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).RequestStatus(ctx, req.(*RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetKeyboardLayouts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(KbdQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetKeyboardLayouts(m, &vMInfoGetKeyboardLayoutsServer{ServerStream: stream})
}

type VMInfo_GetKeyboardLayoutsServer interface {
	Send(*KbdLayout) error
	grpc.ServerStream
}

type vMInfoGetKeyboardLayoutsServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetKeyboardLayoutsServer) Send(m *KbdLayout) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetISOs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ISOsQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetISOs(m, &vMInfoGetISOsServer{ServerStream: stream})
}

type VMInfo_GetISOsServer interface {
	Send(*ISOID) error
	grpc.ServerStream
}

type vMInfoGetISOsServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetISOsServer) Send(m *ISOID) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetISOInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ISOID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetISOInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetISOInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetISOInfo(ctx, req.(*ISOID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_AddISO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ISOInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).AddISO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_AddISO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).AddISO(ctx, req.(*ISOInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_RemoveISO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ISOID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).RemoveISO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_RemoveISO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).RemoveISO(ctx, req.(*ISOID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_SetVMISOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetISOReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).SetVMISOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_SetVMISOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).SetVMISOs(ctx, req.(*SetISOReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVMISOs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetVMISOs(m, &vMInfoGetVMISOsServer{ServerStream: stream})
}

type VMInfo_GetVMISOsServer interface {
	Send(*ISOID) error
	grpc.ServerStream
}

type vMInfoGetVMISOsServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetVMISOsServer) Send(m *ISOID) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_UploadIso_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VMInfoServer).UploadIso(&vMInfoUploadIsoServer{ServerStream: stream})
}

type VMInfo_UploadIsoServer interface {
	SendAndClose(*ReqBool) error
	Recv() (*ISOImageRequest, error)
	grpc.ServerStream
}

type vMInfoUploadIsoServer struct {
	grpc.ServerStream
}

func (x *vMInfoUploadIsoServer) SendAndClose(m *ReqBool) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vMInfoUploadIsoServer) Recv() (*ISOImageRequest, error) {
	m := new(ISOImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VMInfo_GetDisks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DisksQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetDisks(m, &vMInfoGetDisksServer{ServerStream: stream})
}

type VMInfo_GetDisksServer interface {
	Send(*DiskId) error
	grpc.ServerStream
}

type vMInfoGetDisksServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetDisksServer) Send(m *DiskId) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetDiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetDiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetDiskInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetDiskInfo(ctx, req.(*DiskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_SetDiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskInfoUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).SetDiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_SetDiskInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).SetDiskInfo(ctx, req.(*DiskInfoUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_AddDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).AddDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_AddDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).AddDisk(ctx, req.(*DiskInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_RemoveDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).RemoveDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_RemoveDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).RemoveDisk(ctx, req.(*DiskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_SetVMDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDiskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).SetVMDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_SetVMDisks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).SetVMDisks(ctx, req.(*SetDiskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVMDisks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetVMDisks(m, &vMInfoGetVMDisksServer{ServerStream: stream})
}

type VMInfo_GetVMDisksServer interface {
	Send(*DiskId) error
	grpc.ServerStream
}

type vMInfoGetVMDisksServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetVMDisksServer) Send(m *DiskId) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetDiskVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetDiskVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetDiskVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetDiskVM(ctx, req.(*DiskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_UploadDisk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VMInfoServer).UploadDisk(&vMInfoUploadDiskServer{ServerStream: stream})
}

type VMInfo_UploadDiskServer interface {
	SendAndClose(*ReqBool) error
	Recv() (*DiskImageRequest, error)
	grpc.ServerStream
}

type vMInfoUploadDiskServer struct {
	grpc.ServerStream
}

func (x *vMInfoUploadDiskServer) SendAndClose(m *ReqBool) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vMInfoUploadDiskServer) Recv() (*DiskImageRequest, error) {
	m := new(DiskImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VMInfo_GetSwitches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SwitchesQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetSwitches(m, &vMInfoGetSwitchesServer{ServerStream: stream})
}

type VMInfo_GetSwitchesServer interface {
	Send(*SwitchId) error
	grpc.ServerStream
}

type vMInfoGetSwitchesServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetSwitchesServer) Send(m *SwitchId) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetSwitchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetSwitchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetSwitchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetSwitchInfo(ctx, req.(*SwitchId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_AddSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).AddSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_AddSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).AddSwitch(ctx, req.(*SwitchInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_SetSwitchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchInfoUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).SetSwitchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_SetSwitchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).SetSwitchInfo(ctx, req.(*SwitchInfoUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_RemoveSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).RemoveSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_RemoveSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).RemoveSwitch(ctx, req.(*SwitchId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_SetSwitchUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchUplinkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).SetSwitchUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_SetSwitchUplink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).SetSwitchUplink(ctx, req.(*SwitchUplinkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVMNicsAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VmNicsQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetVMNicsAll(m, &vMInfoGetVMNicsAllServer{ServerStream: stream})
}

type VMInfo_GetVMNicsAllServer interface {
	Send(*VmNicId) error
	grpc.ServerStream
}

type vMInfoGetVMNicsAllServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetVMNicsAllServer) Send(m *VmNicId) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_GetVMNicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmNicId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetVMNicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetVMNicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetVMNicInfo(ctx, req.(*VmNicId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_AddVMNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmNicInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).AddVMNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_AddVMNic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).AddVMNic(ctx, req.(*VmNicInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_UpdateVMNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmNicInfoUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).UpdateVMNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_UpdateVMNic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).UpdateVMNic(ctx, req.(*VmNicInfoUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_RemoveVMNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmNicId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).RemoveVMNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_RemoveVMNic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).RemoveVMNic(ctx, req.(*VmNicId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_SetVMNicSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVmNicSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).SetVMNicSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_SetVMNicSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).SetVMNicSwitch(ctx, req.(*SetVmNicSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVMNicVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmNicId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).GetVMNicVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_GetVMNicVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).GetVMNicVM(ctx, req.(*VmNicId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_CloneVMNic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmNicCloneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).CloneVMNic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_CloneVMNic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).CloneVMNic(ctx, req.(*VmNicCloneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_SetVMNics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMInfoServer).SetVMNics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMInfo_SetVMNics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMInfoServer).SetVMNics(ctx, req.(*SetNicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMInfo_GetVMNics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VMID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMInfoServer).GetVMNics(m, &vMInfoGetVMNicsServer{ServerStream: stream})
}

type VMInfo_GetVMNicsServer interface {
	Send(*VmNicId) error
	grpc.ServerStream
}

type vMInfoGetVMNicsServer struct {
	grpc.ServerStream
}

func (x *vMInfoGetVMNicsServer) Send(m *VmNicId) error {
	return x.ServerStream.SendMsg(m)
}

func _VMInfo_Com1Interactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VMInfoServer).Com1Interactive(&vMInfoCom1InteractiveServer{ServerStream: stream})
}

type VMInfo_Com1InteractiveServer interface {
	Send(*ComDataResponse) error
	Recv() (*ComDataRequest, error)
	grpc.ServerStream
}

type vMInfoCom1InteractiveServer struct {
	grpc.ServerStream
}

func (x *vMInfoCom1InteractiveServer) Send(m *ComDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vMInfoCom1InteractiveServer) Recv() (*ComDataRequest, error) {
	m := new(ComDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VMInfo_Com2Interactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VMInfoServer).Com2Interactive(&vMInfoCom2InteractiveServer{ServerStream: stream})
}

type VMInfo_Com2InteractiveServer interface {
	Send(*ComDataResponse) error
	Recv() (*ComDataRequest, error)
	grpc.ServerStream
}

type vMInfoCom2InteractiveServer struct {
	grpc.ServerStream
}

func (x *vMInfoCom2InteractiveServer) Send(m *ComDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vMInfoCom2InteractiveServer) Recv() (*ComDataRequest, error) {
	m := new(ComDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VMInfo_Com3Interactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VMInfoServer).Com3Interactive(&vMInfoCom3InteractiveServer{ServerStream: stream})
}

type VMInfo_Com3InteractiveServer interface {
	Send(*ComDataResponse) error
	Recv() (*ComDataRequest, error)
	grpc.ServerStream
}

type vMInfoCom3InteractiveServer struct {
	grpc.ServerStream
}

func (x *vMInfoCom3InteractiveServer) Send(m *ComDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vMInfoCom3InteractiveServer) Recv() (*ComDataRequest, error) {
	m := new(ComDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VMInfo_Com4Interactive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VMInfoServer).Com4Interactive(&vMInfoCom4InteractiveServer{ServerStream: stream})
}

type VMInfo_Com4InteractiveServer interface {
	Send(*ComDataResponse) error
	Recv() (*ComDataRequest, error)
	grpc.ServerStream
}

type vMInfoCom4InteractiveServer struct {
	grpc.ServerStream
}

func (x *vMInfoCom4InteractiveServer) Send(m *ComDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vMInfoCom4InteractiveServer) Recv() (*ComDataRequest, error) {
	m := new(ComDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VMInfo_ServiceDesc is the grpc.ServiceDesc for VMInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cirrina.VMInfo",
	HandlerType: (*VMInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVM",
			Handler:    _VMInfo_AddVM_Handler,
		},
		{
			MethodName: "GetVMConfig",
			Handler:    _VMInfo_GetVMConfig_Handler,
		},
		{
			MethodName: "GetVMName",
			Handler:    _VMInfo_GetVMName_Handler,
		},
		{
			MethodName: "GetVMID",
			Handler:    _VMInfo_GetVMID_Handler,
		},
		{
			MethodName: "GetVMState",
			Handler:    _VMInfo_GetVMState_Handler,
		},
		{
			MethodName: "UpdateVM",
			Handler:    _VMInfo_UpdateVM_Handler,
		},
		{
			MethodName: "StartVM",
			Handler:    _VMInfo_StartVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _VMInfo_StopVM_Handler,
		},
		{
			MethodName: "DeleteVM",
			Handler:    _VMInfo_DeleteVM_Handler,
		},
		{
			MethodName: "ClearUEFIState",
			Handler:    _VMInfo_ClearUEFIState_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _VMInfo_GetVersion_Handler,
		},
		{
			MethodName: "RequestStatus",
			Handler:    _VMInfo_RequestStatus_Handler,
		},
		{
			MethodName: "GetISOInfo",
			Handler:    _VMInfo_GetISOInfo_Handler,
		},
		{
			MethodName: "AddISO",
			Handler:    _VMInfo_AddISO_Handler,
		},
		{
			MethodName: "RemoveISO",
			Handler:    _VMInfo_RemoveISO_Handler,
		},
		{
			MethodName: "SetVMISOs",
			Handler:    _VMInfo_SetVMISOs_Handler,
		},
		{
			MethodName: "GetDiskInfo",
			Handler:    _VMInfo_GetDiskInfo_Handler,
		},
		{
			MethodName: "SetDiskInfo",
			Handler:    _VMInfo_SetDiskInfo_Handler,
		},
		{
			MethodName: "AddDisk",
			Handler:    _VMInfo_AddDisk_Handler,
		},
		{
			MethodName: "RemoveDisk",
			Handler:    _VMInfo_RemoveDisk_Handler,
		},
		{
			MethodName: "SetVMDisks",
			Handler:    _VMInfo_SetVMDisks_Handler,
		},
		{
			MethodName: "GetDiskVM",
			Handler:    _VMInfo_GetDiskVM_Handler,
		},
		{
			MethodName: "GetSwitchInfo",
			Handler:    _VMInfo_GetSwitchInfo_Handler,
		},
		{
			MethodName: "AddSwitch",
			Handler:    _VMInfo_AddSwitch_Handler,
		},
		{
			MethodName: "SetSwitchInfo",
			Handler:    _VMInfo_SetSwitchInfo_Handler,
		},
		{
			MethodName: "RemoveSwitch",
			Handler:    _VMInfo_RemoveSwitch_Handler,
		},
		{
			MethodName: "SetSwitchUplink",
			Handler:    _VMInfo_SetSwitchUplink_Handler,
		},
		{
			MethodName: "GetVMNicInfo",
			Handler:    _VMInfo_GetVMNicInfo_Handler,
		},
		{
			MethodName: "AddVMNic",
			Handler:    _VMInfo_AddVMNic_Handler,
		},
		{
			MethodName: "UpdateVMNic",
			Handler:    _VMInfo_UpdateVMNic_Handler,
		},
		{
			MethodName: "RemoveVMNic",
			Handler:    _VMInfo_RemoveVMNic_Handler,
		},
		{
			MethodName: "SetVMNicSwitch",
			Handler:    _VMInfo_SetVMNicSwitch_Handler,
		},
		{
			MethodName: "GetVMNicVM",
			Handler:    _VMInfo_GetVMNicVM_Handler,
		},
		{
			MethodName: "CloneVMNic",
			Handler:    _VMInfo_CloneVMNic_Handler,
		},
		{
			MethodName: "SetVMNics",
			Handler:    _VMInfo_SetVMNics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVMs",
			Handler:       _VMInfo_GetVMs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetNetInterfaces",
			Handler:       _VMInfo_GetNetInterfaces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetKeyboardLayouts",
			Handler:       _VMInfo_GetKeyboardLayouts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetISOs",
			Handler:       _VMInfo_GetISOs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVMISOs",
			Handler:       _VMInfo_GetVMISOs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadIso",
			Handler:       _VMInfo_UploadIso_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetDisks",
			Handler:       _VMInfo_GetDisks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVMDisks",
			Handler:       _VMInfo_GetVMDisks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadDisk",
			Handler:       _VMInfo_UploadDisk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetSwitches",
			Handler:       _VMInfo_GetSwitches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVMNicsAll",
			Handler:       _VMInfo_GetVMNicsAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVMNics",
			Handler:       _VMInfo_GetVMNics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Com1Interactive",
			Handler:       _VMInfo_Com1Interactive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Com2Interactive",
			Handler:       _VMInfo_Com2Interactive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Com3Interactive",
			Handler:       _VMInfo_Com3Interactive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Com4Interactive",
			Handler:       _VMInfo_Com4Interactive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cirrina.proto",
}
