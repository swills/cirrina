// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.4
// source: cirrina.proto

package cirrina

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetType int32

const (
	NetType_VIRTIONET NetType = 0
	NetType_E1000     NetType = 1
)

// Enum value maps for NetType.
var (
	NetType_name = map[int32]string{
		0: "VIRTIONET",
		1: "E1000",
	}
	NetType_value = map[string]int32{
		"VIRTIONET": 0,
		"E1000":     1,
	}
)

func (x NetType) Enum() *NetType {
	p := new(NetType)
	*p = x
	return p
}

func (x NetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetType) Descriptor() protoreflect.EnumDescriptor {
	return file_cirrina_proto_enumTypes[0].Descriptor()
}

func (NetType) Type() protoreflect.EnumType {
	return &file_cirrina_proto_enumTypes[0]
}

func (x NetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetType.Descriptor instead.
func (NetType) EnumDescriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{0}
}

type DiskType int32

const (
	DiskType_NVME      DiskType = 0
	DiskType_AHCIHD    DiskType = 1
	DiskType_VIRTIOBLK DiskType = 2
)

// Enum value maps for DiskType.
var (
	DiskType_name = map[int32]string{
		0: "NVME",
		1: "AHCIHD",
		2: "VIRTIOBLK",
	}
	DiskType_value = map[string]int32{
		"NVME":      0,
		"AHCIHD":    1,
		"VIRTIOBLK": 2,
	}
)

func (x DiskType) Enum() *DiskType {
	p := new(DiskType)
	*p = x
	return p
}

func (x DiskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskType) Descriptor() protoreflect.EnumDescriptor {
	return file_cirrina_proto_enumTypes[1].Descriptor()
}

func (DiskType) Type() protoreflect.EnumType {
	return &file_cirrina_proto_enumTypes[1]
}

func (x DiskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskType.Descriptor instead.
func (DiskType) EnumDescriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{1}
}

type DiskDevType int32

const (
	DiskDevType_FILE DiskDevType = 0
	DiskDevType_ZVOL DiskDevType = 1
)

// Enum value maps for DiskDevType.
var (
	DiskDevType_name = map[int32]string{
		0: "FILE",
		1: "ZVOL",
	}
	DiskDevType_value = map[string]int32{
		"FILE": 0,
		"ZVOL": 1,
	}
)

func (x DiskDevType) Enum() *DiskDevType {
	p := new(DiskDevType)
	*p = x
	return p
}

func (x DiskDevType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskDevType) Descriptor() protoreflect.EnumDescriptor {
	return file_cirrina_proto_enumTypes[2].Descriptor()
}

func (DiskDevType) Type() protoreflect.EnumType {
	return &file_cirrina_proto_enumTypes[2]
}

func (x DiskDevType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskDevType.Descriptor instead.
func (DiskDevType) EnumDescriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{2}
}

type SwitchType int32

const (
	SwitchType_IF SwitchType = 0
	SwitchType_NG SwitchType = 1
)

// Enum value maps for SwitchType.
var (
	SwitchType_name = map[int32]string{
		0: "IF",
		1: "NG",
	}
	SwitchType_value = map[string]int32{
		"IF": 0,
		"NG": 1,
	}
)

func (x SwitchType) Enum() *SwitchType {
	p := new(SwitchType)
	*p = x
	return p
}

func (x SwitchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchType) Descriptor() protoreflect.EnumDescriptor {
	return file_cirrina_proto_enumTypes[3].Descriptor()
}

func (SwitchType) Type() protoreflect.EnumType {
	return &file_cirrina_proto_enumTypes[3]
}

func (x SwitchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchType.Descriptor instead.
func (SwitchType) EnumDescriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{3}
}

type NetDevType int32

const (
	NetDevType_TAP      NetDevType = 0
	NetDevType_VMNET    NetDevType = 1
	NetDevType_NETGRAPH NetDevType = 2
)

// Enum value maps for NetDevType.
var (
	NetDevType_name = map[int32]string{
		0: "TAP",
		1: "VMNET",
		2: "NETGRAPH",
	}
	NetDevType_value = map[string]int32{
		"TAP":      0,
		"VMNET":    1,
		"NETGRAPH": 2,
	}
)

func (x NetDevType) Enum() *NetDevType {
	p := new(NetDevType)
	*p = x
	return p
}

func (x NetDevType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetDevType) Descriptor() protoreflect.EnumDescriptor {
	return file_cirrina_proto_enumTypes[4].Descriptor()
}

func (NetDevType) Type() protoreflect.EnumType {
	return &file_cirrina_proto_enumTypes[4]
}

func (x NetDevType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetDevType.Descriptor instead.
func (NetDevType) EnumDescriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{4}
}

type VmStatus int32

const (
	VmStatus_STATUS_STOPPED  VmStatus = 0
	VmStatus_STATUS_STARTING VmStatus = 1
	VmStatus_STATUS_RUNNING  VmStatus = 2
	VmStatus_STATUS_STOPPING VmStatus = 3
)

// Enum value maps for VmStatus.
var (
	VmStatus_name = map[int32]string{
		0: "STATUS_STOPPED",
		1: "STATUS_STARTING",
		2: "STATUS_RUNNING",
		3: "STATUS_STOPPING",
	}
	VmStatus_value = map[string]int32{
		"STATUS_STOPPED":  0,
		"STATUS_STARTING": 1,
		"STATUS_RUNNING":  2,
		"STATUS_STOPPING": 3,
	}
)

func (x VmStatus) Enum() *VmStatus {
	p := new(VmStatus)
	*p = x
	return p
}

func (x VmStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VmStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cirrina_proto_enumTypes[5].Descriptor()
}

func (VmStatus) Type() protoreflect.EnumType {
	return &file_cirrina_proto_enumTypes[5]
}

func (x VmStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VmStatus.Descriptor instead.
func (VmStatus) EnumDescriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{5}
}

type VMID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VMID) Reset() {
	*x = VMID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMID) ProtoMessage() {}

func (x *VMID) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMID.ProtoReflect.Descriptor instead.
func (*VMID) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{0}
}

func (x *VMID) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DiskId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DiskId) Reset() {
	*x = DiskId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskId) ProtoMessage() {}

func (x *DiskId) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskId.ProtoReflect.Descriptor instead.
func (*DiskId) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{1}
}

func (x *DiskId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SwitchId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SwitchId) Reset() {
	*x = SwitchId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchId) ProtoMessage() {}

func (x *SwitchId) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchId.ProtoReflect.Descriptor instead.
func (*SwitchId) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{2}
}

func (x *SwitchId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type VmNicId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VmNicId) Reset() {
	*x = VmNicId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmNicId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmNicId) ProtoMessage() {}

func (x *VmNicId) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmNicId.ProtoReflect.Descriptor instead.
func (*VmNicId) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{3}
}

func (x *VmNicId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type SetISOReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Isoid []string `protobuf:"bytes,2,rep,name=isoid,proto3" json:"isoid,omitempty"`
}

func (x *SetISOReq) Reset() {
	*x = SetISOReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetISOReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetISOReq) ProtoMessage() {}

func (x *SetISOReq) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetISOReq.ProtoReflect.Descriptor instead.
func (*SetISOReq) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{4}
}

func (x *SetISOReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetISOReq) GetIsoid() []string {
	if x != nil {
		return x.Isoid
	}
	return nil
}

type SetDiskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Diskid []string `protobuf:"bytes,2,rep,name=diskid,proto3" json:"diskid,omitempty"`
}

func (x *SetDiskReq) Reset() {
	*x = SetDiskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDiskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDiskReq) ProtoMessage() {}

func (x *SetDiskReq) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDiskReq.ProtoReflect.Descriptor instead.
func (*SetDiskReq) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{5}
}

func (x *SetDiskReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SetDiskReq) GetDiskid() []string {
	if x != nil {
		return x.Diskid
	}
	return nil
}

type SetNicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vmid    string   `protobuf:"bytes,1,opt,name=vmid,proto3" json:"vmid,omitempty"`
	Vmnicid []string `protobuf:"bytes,2,rep,name=vmnicid,proto3" json:"vmnicid,omitempty"`
}

func (x *SetNicReq) Reset() {
	*x = SetNicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNicReq) ProtoMessage() {}

func (x *SetNicReq) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNicReq.ProtoReflect.Descriptor instead.
func (*SetNicReq) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{6}
}

func (x *SetNicReq) GetVmid() string {
	if x != nil {
		return x.Vmid
	}
	return ""
}

func (x *SetNicReq) GetVmnicid() []string {
	if x != nil {
		return x.Vmnicid
	}
	return nil
}

type SetVmNicSwitchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vmnicid  *VmNicId  `protobuf:"bytes,1,opt,name=vmnicid,proto3" json:"vmnicid,omitempty"`
	Switchid *SwitchId `protobuf:"bytes,2,opt,name=switchid,proto3" json:"switchid,omitempty"`
}

func (x *SetVmNicSwitchReq) Reset() {
	*x = SetVmNicSwitchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVmNicSwitchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVmNicSwitchReq) ProtoMessage() {}

func (x *SetVmNicSwitchReq) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVmNicSwitchReq.ProtoReflect.Descriptor instead.
func (*SetVmNicSwitchReq) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{7}
}

func (x *SetVmNicSwitchReq) GetVmnicid() *VmNicId {
	if x != nil {
		return x.Vmnicid
	}
	return nil
}

func (x *SetVmNicSwitchReq) GetSwitchid() *SwitchId {
	if x != nil {
		return x.Switchid
	}
	return nil
}

type SwitchUplinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switchid *SwitchId `protobuf:"bytes,1,opt,name=switchid,proto3" json:"switchid,omitempty"`
	Uplink   *string   `protobuf:"bytes,2,opt,name=uplink,proto3,oneof" json:"uplink,omitempty"`
}

func (x *SwitchUplinkReq) Reset() {
	*x = SwitchUplinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchUplinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchUplinkReq) ProtoMessage() {}

func (x *SwitchUplinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchUplinkReq.ProtoReflect.Descriptor instead.
func (*SwitchUplinkReq) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{8}
}

func (x *SwitchUplinkReq) GetSwitchid() *SwitchId {
	if x != nil {
		return x.Switchid
	}
	return nil
}

func (x *SwitchUplinkReq) GetUplink() string {
	if x != nil && x.Uplink != nil {
		return *x.Uplink
	}
	return ""
}

type KbdLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *KbdLayout) Reset() {
	*x = KbdLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KbdLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KbdLayout) ProtoMessage() {}

func (x *KbdLayout) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KbdLayout.ProtoReflect.Descriptor instead.
func (*KbdLayout) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{9}
}

func (x *KbdLayout) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KbdLayout) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type DiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string      `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string      `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Size        *string      `protobuf:"bytes,3,opt,name=size,proto3,oneof" json:"size,omitempty"`
	DiskType    *DiskType    `protobuf:"varint,4,opt,name=disk_type,json=diskType,proto3,enum=cirrina.DiskType,oneof" json:"disk_type,omitempty"`
	Usage       *string      `protobuf:"bytes,5,opt,name=usage,proto3,oneof" json:"usage,omitempty"`
	SizeNum     *uint64      `protobuf:"varint,6,opt,name=size_num,json=sizeNum,proto3,oneof" json:"size_num,omitempty"`
	UsageNum    *uint64      `protobuf:"varint,7,opt,name=usage_num,json=usageNum,proto3,oneof" json:"usage_num,omitempty"`
	DiskDevType *DiskDevType `protobuf:"varint,8,opt,name=disk_dev_type,json=diskDevType,proto3,enum=cirrina.DiskDevType,oneof" json:"disk_dev_type,omitempty"`
	Cache       *bool        `protobuf:"varint,9,opt,name=cache,proto3,oneof" json:"cache,omitempty"`
	Direct      *bool        `protobuf:"varint,10,opt,name=direct,proto3,oneof" json:"direct,omitempty"`
}

func (x *DiskInfo) Reset() {
	*x = DiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskInfo) ProtoMessage() {}

func (x *DiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskInfo.ProtoReflect.Descriptor instead.
func (*DiskInfo) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{10}
}

func (x *DiskInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DiskInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DiskInfo) GetSize() string {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return ""
}

func (x *DiskInfo) GetDiskType() DiskType {
	if x != nil && x.DiskType != nil {
		return *x.DiskType
	}
	return DiskType_NVME
}

func (x *DiskInfo) GetUsage() string {
	if x != nil && x.Usage != nil {
		return *x.Usage
	}
	return ""
}

func (x *DiskInfo) GetSizeNum() uint64 {
	if x != nil && x.SizeNum != nil {
		return *x.SizeNum
	}
	return 0
}

func (x *DiskInfo) GetUsageNum() uint64 {
	if x != nil && x.UsageNum != nil {
		return *x.UsageNum
	}
	return 0
}

func (x *DiskInfo) GetDiskDevType() DiskDevType {
	if x != nil && x.DiskDevType != nil {
		return *x.DiskDevType
	}
	return DiskDevType_FILE
}

func (x *DiskInfo) GetCache() bool {
	if x != nil && x.Cache != nil {
		return *x.Cache
	}
	return false
}

func (x *DiskInfo) GetDirect() bool {
	if x != nil && x.Direct != nil {
		return *x.Direct
	}
	return false
}

type DiskInfoUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *string      `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string      `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Size        *string      `protobuf:"bytes,4,opt,name=size,proto3,oneof" json:"size,omitempty"`
	DiskType    *DiskType    `protobuf:"varint,5,opt,name=disk_type,json=diskType,proto3,enum=cirrina.DiskType,oneof" json:"disk_type,omitempty"`
	DiskDevType *DiskDevType `protobuf:"varint,6,opt,name=disk_dev_type,json=diskDevType,proto3,enum=cirrina.DiskDevType,oneof" json:"disk_dev_type,omitempty"`
	Cache       *bool        `protobuf:"varint,7,opt,name=cache,proto3,oneof" json:"cache,omitempty"`
	Direct      *bool        `protobuf:"varint,8,opt,name=direct,proto3,oneof" json:"direct,omitempty"`
}

func (x *DiskInfoUpdate) Reset() {
	*x = DiskInfoUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskInfoUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskInfoUpdate) ProtoMessage() {}

func (x *DiskInfoUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskInfoUpdate.ProtoReflect.Descriptor instead.
func (*DiskInfoUpdate) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{11}
}

func (x *DiskInfoUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DiskInfoUpdate) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DiskInfoUpdate) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DiskInfoUpdate) GetSize() string {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return ""
}

func (x *DiskInfoUpdate) GetDiskType() DiskType {
	if x != nil && x.DiskType != nil {
		return *x.DiskType
	}
	return DiskType_NVME
}

func (x *DiskInfoUpdate) GetDiskDevType() DiskDevType {
	if x != nil && x.DiskDevType != nil {
		return *x.DiskDevType
	}
	return DiskDevType_FILE
}

func (x *DiskInfoUpdate) GetCache() bool {
	if x != nil && x.Cache != nil {
		return *x.Cache
	}
	return false
}

func (x *DiskInfoUpdate) GetDirect() bool {
	if x != nil && x.Direct != nil {
		return *x.Direct
	}
	return false
}

type NetInterfacesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NetInterfacesReq) Reset() {
	*x = NetInterfacesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetInterfacesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetInterfacesReq) ProtoMessage() {}

func (x *NetInterfacesReq) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetInterfacesReq.ProtoReflect.Descriptor instead.
func (*NetInterfacesReq) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{12}
}

type NetIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=InterfaceName,proto3" json:"InterfaceName,omitempty"`
}

func (x *NetIf) Reset() {
	*x = NetIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetIf) ProtoMessage() {}

func (x *NetIf) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetIf.ProtoReflect.Descriptor instead.
func (*NetIf) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{13}
}

func (x *NetIf) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type SwitchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string     `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string     `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	SwitchType  *SwitchType `protobuf:"varint,3,opt,name=switch_type,json=switchType,proto3,enum=cirrina.SwitchType,oneof" json:"switch_type,omitempty"`
	Uplink      *string     `protobuf:"bytes,4,opt,name=uplink,proto3,oneof" json:"uplink,omitempty"`
}

func (x *SwitchInfo) Reset() {
	*x = SwitchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchInfo) ProtoMessage() {}

func (x *SwitchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchInfo.ProtoReflect.Descriptor instead.
func (*SwitchInfo) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{14}
}

func (x *SwitchInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SwitchInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SwitchInfo) GetSwitchType() SwitchType {
	if x != nil && x.SwitchType != nil {
		return *x.SwitchType
	}
	return SwitchType_IF
}

func (x *SwitchInfo) GetUplink() string {
	if x != nil && x.Uplink != nil {
		return *x.Uplink
	}
	return ""
}

type SwitchInfoUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *string     `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string     `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	SwitchType  *SwitchType `protobuf:"varint,4,opt,name=switch_type,json=switchType,proto3,enum=cirrina.SwitchType,oneof" json:"switch_type,omitempty"`
	Uplink      *string     `protobuf:"bytes,5,opt,name=uplink,proto3,oneof" json:"uplink,omitempty"`
}

func (x *SwitchInfoUpdate) Reset() {
	*x = SwitchInfoUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchInfoUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchInfoUpdate) ProtoMessage() {}

func (x *SwitchInfoUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchInfoUpdate.ProtoReflect.Descriptor instead.
func (*SwitchInfoUpdate) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{15}
}

func (x *SwitchInfoUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SwitchInfoUpdate) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SwitchInfoUpdate) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *SwitchInfoUpdate) GetSwitchType() SwitchType {
	if x != nil && x.SwitchType != nil {
		return *x.SwitchType
	}
	return SwitchType_IF
}

func (x *SwitchInfoUpdate) GetUplink() string {
	if x != nil && x.Uplink != nil {
		return *x.Uplink
	}
	return ""
}

type VmNicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string     `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string     `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Mac         *string     `protobuf:"bytes,3,opt,name=mac,proto3,oneof" json:"mac,omitempty"`
	Netdevtype  *NetDevType `protobuf:"varint,4,opt,name=netdevtype,proto3,enum=cirrina.NetDevType,oneof" json:"netdevtype,omitempty"`
	Nettype     *NetType    `protobuf:"varint,5,opt,name=nettype,proto3,enum=cirrina.NetType,oneof" json:"nettype,omitempty"`
	Vmid        *string     `protobuf:"bytes,6,opt,name=vmid,proto3,oneof" json:"vmid,omitempty"`
	Switchid    *string     `protobuf:"bytes,7,opt,name=switchid,proto3,oneof" json:"switchid,omitempty"`
	Ratelimit   *bool       `protobuf:"varint,8,opt,name=ratelimit,proto3,oneof" json:"ratelimit,omitempty"`
	Ratein      *uint64     `protobuf:"varint,9,opt,name=ratein,proto3,oneof" json:"ratein,omitempty"`
	Rateout     *uint64     `protobuf:"varint,10,opt,name=rateout,proto3,oneof" json:"rateout,omitempty"`
}

func (x *VmNicInfo) Reset() {
	*x = VmNicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmNicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmNicInfo) ProtoMessage() {}

func (x *VmNicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmNicInfo.ProtoReflect.Descriptor instead.
func (*VmNicInfo) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{16}
}

func (x *VmNicInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VmNicInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *VmNicInfo) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *VmNicInfo) GetNetdevtype() NetDevType {
	if x != nil && x.Netdevtype != nil {
		return *x.Netdevtype
	}
	return NetDevType_TAP
}

func (x *VmNicInfo) GetNettype() NetType {
	if x != nil && x.Nettype != nil {
		return *x.Nettype
	}
	return NetType_VIRTIONET
}

func (x *VmNicInfo) GetVmid() string {
	if x != nil && x.Vmid != nil {
		return *x.Vmid
	}
	return ""
}

func (x *VmNicInfo) GetSwitchid() string {
	if x != nil && x.Switchid != nil {
		return *x.Switchid
	}
	return ""
}

func (x *VmNicInfo) GetRatelimit() bool {
	if x != nil && x.Ratelimit != nil {
		return *x.Ratelimit
	}
	return false
}

func (x *VmNicInfo) GetRatein() uint64 {
	if x != nil && x.Ratein != nil {
		return *x.Ratein
	}
	return 0
}

func (x *VmNicInfo) GetRateout() uint64 {
	if x != nil && x.Rateout != nil {
		return *x.Rateout
	}
	return 0
}

type VmNicInfoUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vmnicid     *VmNicId    `protobuf:"bytes,1,opt,name=vmnicid,proto3" json:"vmnicid,omitempty"`
	Name        *string     `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string     `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Mac         *string     `protobuf:"bytes,4,opt,name=mac,proto3,oneof" json:"mac,omitempty"`
	Netdevtype  *NetDevType `protobuf:"varint,5,opt,name=netdevtype,proto3,enum=cirrina.NetDevType,oneof" json:"netdevtype,omitempty"`
	Nettype     *NetType    `protobuf:"varint,6,opt,name=nettype,proto3,enum=cirrina.NetType,oneof" json:"nettype,omitempty"`
	Vmid        *string     `protobuf:"bytes,7,opt,name=vmid,proto3,oneof" json:"vmid,omitempty"`
	Switchid    *string     `protobuf:"bytes,8,opt,name=switchid,proto3,oneof" json:"switchid,omitempty"`
}

func (x *VmNicInfoUpdate) Reset() {
	*x = VmNicInfoUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmNicInfoUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmNicInfoUpdate) ProtoMessage() {}

func (x *VmNicInfoUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmNicInfoUpdate.ProtoReflect.Descriptor instead.
func (*VmNicInfoUpdate) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{17}
}

func (x *VmNicInfoUpdate) GetVmnicid() *VmNicId {
	if x != nil {
		return x.Vmnicid
	}
	return nil
}

func (x *VmNicInfoUpdate) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VmNicInfoUpdate) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *VmNicInfoUpdate) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *VmNicInfoUpdate) GetNetdevtype() NetDevType {
	if x != nil && x.Netdevtype != nil {
		return *x.Netdevtype
	}
	return NetDevType_TAP
}

func (x *VmNicInfoUpdate) GetNettype() NetType {
	if x != nil && x.Nettype != nil {
		return *x.Nettype
	}
	return NetType_VIRTIONET
}

func (x *VmNicInfoUpdate) GetVmid() string {
	if x != nil && x.Vmid != nil {
		return *x.Vmid
	}
	return ""
}

func (x *VmNicInfoUpdate) GetSwitchid() string {
	if x != nil && x.Switchid != nil {
		return *x.Switchid
	}
	return ""
}

type VMConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description    *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Cpu            *uint32 `protobuf:"varint,4,opt,name=cpu,proto3,oneof" json:"cpu,omitempty"`
	Mem            *uint32 `protobuf:"varint,5,opt,name=mem,proto3,oneof" json:"mem,omitempty"`
	MaxWait        *uint32 `protobuf:"varint,6,opt,name=max_wait,json=maxWait,proto3,oneof" json:"max_wait,omitempty"`
	Restart        *bool   `protobuf:"varint,7,opt,name=restart,proto3,oneof" json:"restart,omitempty"`
	RestartDelay   *uint32 `protobuf:"varint,8,opt,name=restart_delay,json=restartDelay,proto3,oneof" json:"restart_delay,omitempty"`
	Screen         *bool   `protobuf:"varint,9,opt,name=screen,proto3,oneof" json:"screen,omitempty"`
	ScreenWidth    *uint32 `protobuf:"varint,10,opt,name=screen_width,json=screenWidth,proto3,oneof" json:"screen_width,omitempty"`
	ScreenHeight   *uint32 `protobuf:"varint,11,opt,name=screen_height,json=screenHeight,proto3,oneof" json:"screen_height,omitempty"`
	Vncwait        *bool   `protobuf:"varint,12,opt,name=vncwait,proto3,oneof" json:"vncwait,omitempty"`
	Wireguestmem   *bool   `protobuf:"varint,13,opt,name=wireguestmem,proto3,oneof" json:"wireguestmem,omitempty"`
	Tablet         *bool   `protobuf:"varint,14,opt,name=tablet,proto3,oneof" json:"tablet,omitempty"`
	Storeuefi      *bool   `protobuf:"varint,15,opt,name=storeuefi,proto3,oneof" json:"storeuefi,omitempty"`
	Utc            *bool   `protobuf:"varint,16,opt,name=utc,proto3,oneof" json:"utc,omitempty"`
	Hostbridge     *bool   `protobuf:"varint,17,opt,name=hostbridge,proto3,oneof" json:"hostbridge,omitempty"`
	Acpi           *bool   `protobuf:"varint,18,opt,name=acpi,proto3,oneof" json:"acpi,omitempty"`
	Hlt            *bool   `protobuf:"varint,19,opt,name=hlt,proto3,oneof" json:"hlt,omitempty"`
	Eop            *bool   `protobuf:"varint,20,opt,name=eop,proto3,oneof" json:"eop,omitempty"`
	Dpo            *bool   `protobuf:"varint,21,opt,name=dpo,proto3,oneof" json:"dpo,omitempty"`
	Ium            *bool   `protobuf:"varint,22,opt,name=ium,proto3,oneof" json:"ium,omitempty"`
	Vncport        *string `protobuf:"bytes,24,opt,name=vncport,proto3,oneof" json:"vncport,omitempty"`
	Keyboard       *string `protobuf:"bytes,26,opt,name=keyboard,proto3,oneof" json:"keyboard,omitempty"`
	Autostart      *bool   `protobuf:"varint,27,opt,name=autostart,proto3,oneof" json:"autostart,omitempty"`
	Sound          *bool   `protobuf:"varint,30,opt,name=sound,proto3,oneof" json:"sound,omitempty"`
	SoundIn        *string `protobuf:"bytes,31,opt,name=sound_in,json=soundIn,proto3,oneof" json:"sound_in,omitempty"`
	SoundOut       *string `protobuf:"bytes,32,opt,name=sound_out,json=soundOut,proto3,oneof" json:"sound_out,omitempty"`
	Com1           *bool   `protobuf:"varint,33,opt,name=com1,proto3,oneof" json:"com1,omitempty"`
	Com1Dev        *string `protobuf:"bytes,34,opt,name=com1dev,proto3,oneof" json:"com1dev,omitempty"`
	Com2           *bool   `protobuf:"varint,35,opt,name=com2,proto3,oneof" json:"com2,omitempty"`
	Com2Dev        *string `protobuf:"bytes,36,opt,name=com2dev,proto3,oneof" json:"com2dev,omitempty"`
	Com3           *bool   `protobuf:"varint,37,opt,name=com3,proto3,oneof" json:"com3,omitempty"`
	Com3Dev        *string `protobuf:"bytes,38,opt,name=com3dev,proto3,oneof" json:"com3dev,omitempty"`
	Com4           *bool   `protobuf:"varint,39,opt,name=com4,proto3,oneof" json:"com4,omitempty"`
	Com4Dev        *string `protobuf:"bytes,40,opt,name=com4dev,proto3,oneof" json:"com4dev,omitempty"`
	ExtraArgs      *string `protobuf:"bytes,41,opt,name=extra_args,json=extraArgs,proto3,oneof" json:"extra_args,omitempty"`
	Com1Log        *bool   `protobuf:"varint,42,opt,name=com1log,proto3,oneof" json:"com1log,omitempty"`
	Com2Log        *bool   `protobuf:"varint,43,opt,name=com2log,proto3,oneof" json:"com2log,omitempty"`
	Com3Log        *bool   `protobuf:"varint,44,opt,name=com3log,proto3,oneof" json:"com3log,omitempty"`
	Com4Log        *bool   `protobuf:"varint,45,opt,name=com4log,proto3,oneof" json:"com4log,omitempty"`
	Com1Speed      *uint32 `protobuf:"varint,46,opt,name=com1speed,proto3,oneof" json:"com1speed,omitempty"`
	Com2Speed      *uint32 `protobuf:"varint,47,opt,name=com2speed,proto3,oneof" json:"com2speed,omitempty"`
	Com3Speed      *uint32 `protobuf:"varint,48,opt,name=com3speed,proto3,oneof" json:"com3speed,omitempty"`
	Com4Speed      *uint32 `protobuf:"varint,49,opt,name=com4speed,proto3,oneof" json:"com4speed,omitempty"`
	AutostartDelay *uint32 `protobuf:"varint,50,opt,name=autostart_delay,json=autostartDelay,proto3,oneof" json:"autostart_delay,omitempty"`
	Debug          *bool   `protobuf:"varint,51,opt,name=debug,proto3,oneof" json:"debug,omitempty"`
	DebugWait      *bool   `protobuf:"varint,52,opt,name=debug_wait,json=debugWait,proto3,oneof" json:"debug_wait,omitempty"`
	DebugPort      *string `protobuf:"bytes,53,opt,name=debug_port,json=debugPort,proto3,oneof" json:"debug_port,omitempty"`
	Priority       *int32  `protobuf:"varint,54,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Protect        *bool   `protobuf:"varint,55,opt,name=protect,proto3,oneof" json:"protect,omitempty"`
	Pcpu           *uint32 `protobuf:"varint,56,opt,name=pcpu,proto3,oneof" json:"pcpu,omitempty"`
	Rbps           *uint32 `protobuf:"varint,57,opt,name=rbps,proto3,oneof" json:"rbps,omitempty"`
	Wbps           *uint32 `protobuf:"varint,58,opt,name=wbps,proto3,oneof" json:"wbps,omitempty"`
	Riops          *uint32 `protobuf:"varint,59,opt,name=riops,proto3,oneof" json:"riops,omitempty"`
	Wiops          *uint32 `protobuf:"varint,60,opt,name=wiops,proto3,oneof" json:"wiops,omitempty"`
}

func (x *VMConfig) Reset() {
	*x = VMConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMConfig) ProtoMessage() {}

func (x *VMConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMConfig.ProtoReflect.Descriptor instead.
func (*VMConfig) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{18}
}

func (x *VMConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VMConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VMConfig) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *VMConfig) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *VMConfig) GetMem() uint32 {
	if x != nil && x.Mem != nil {
		return *x.Mem
	}
	return 0
}

func (x *VMConfig) GetMaxWait() uint32 {
	if x != nil && x.MaxWait != nil {
		return *x.MaxWait
	}
	return 0
}

func (x *VMConfig) GetRestart() bool {
	if x != nil && x.Restart != nil {
		return *x.Restart
	}
	return false
}

func (x *VMConfig) GetRestartDelay() uint32 {
	if x != nil && x.RestartDelay != nil {
		return *x.RestartDelay
	}
	return 0
}

func (x *VMConfig) GetScreen() bool {
	if x != nil && x.Screen != nil {
		return *x.Screen
	}
	return false
}

func (x *VMConfig) GetScreenWidth() uint32 {
	if x != nil && x.ScreenWidth != nil {
		return *x.ScreenWidth
	}
	return 0
}

func (x *VMConfig) GetScreenHeight() uint32 {
	if x != nil && x.ScreenHeight != nil {
		return *x.ScreenHeight
	}
	return 0
}

func (x *VMConfig) GetVncwait() bool {
	if x != nil && x.Vncwait != nil {
		return *x.Vncwait
	}
	return false
}

func (x *VMConfig) GetWireguestmem() bool {
	if x != nil && x.Wireguestmem != nil {
		return *x.Wireguestmem
	}
	return false
}

func (x *VMConfig) GetTablet() bool {
	if x != nil && x.Tablet != nil {
		return *x.Tablet
	}
	return false
}

func (x *VMConfig) GetStoreuefi() bool {
	if x != nil && x.Storeuefi != nil {
		return *x.Storeuefi
	}
	return false
}

func (x *VMConfig) GetUtc() bool {
	if x != nil && x.Utc != nil {
		return *x.Utc
	}
	return false
}

func (x *VMConfig) GetHostbridge() bool {
	if x != nil && x.Hostbridge != nil {
		return *x.Hostbridge
	}
	return false
}

func (x *VMConfig) GetAcpi() bool {
	if x != nil && x.Acpi != nil {
		return *x.Acpi
	}
	return false
}

func (x *VMConfig) GetHlt() bool {
	if x != nil && x.Hlt != nil {
		return *x.Hlt
	}
	return false
}

func (x *VMConfig) GetEop() bool {
	if x != nil && x.Eop != nil {
		return *x.Eop
	}
	return false
}

func (x *VMConfig) GetDpo() bool {
	if x != nil && x.Dpo != nil {
		return *x.Dpo
	}
	return false
}

func (x *VMConfig) GetIum() bool {
	if x != nil && x.Ium != nil {
		return *x.Ium
	}
	return false
}

func (x *VMConfig) GetVncport() string {
	if x != nil && x.Vncport != nil {
		return *x.Vncport
	}
	return ""
}

func (x *VMConfig) GetKeyboard() string {
	if x != nil && x.Keyboard != nil {
		return *x.Keyboard
	}
	return ""
}

func (x *VMConfig) GetAutostart() bool {
	if x != nil && x.Autostart != nil {
		return *x.Autostart
	}
	return false
}

func (x *VMConfig) GetSound() bool {
	if x != nil && x.Sound != nil {
		return *x.Sound
	}
	return false
}

func (x *VMConfig) GetSoundIn() string {
	if x != nil && x.SoundIn != nil {
		return *x.SoundIn
	}
	return ""
}

func (x *VMConfig) GetSoundOut() string {
	if x != nil && x.SoundOut != nil {
		return *x.SoundOut
	}
	return ""
}

func (x *VMConfig) GetCom1() bool {
	if x != nil && x.Com1 != nil {
		return *x.Com1
	}
	return false
}

func (x *VMConfig) GetCom1Dev() string {
	if x != nil && x.Com1Dev != nil {
		return *x.Com1Dev
	}
	return ""
}

func (x *VMConfig) GetCom2() bool {
	if x != nil && x.Com2 != nil {
		return *x.Com2
	}
	return false
}

func (x *VMConfig) GetCom2Dev() string {
	if x != nil && x.Com2Dev != nil {
		return *x.Com2Dev
	}
	return ""
}

func (x *VMConfig) GetCom3() bool {
	if x != nil && x.Com3 != nil {
		return *x.Com3
	}
	return false
}

func (x *VMConfig) GetCom3Dev() string {
	if x != nil && x.Com3Dev != nil {
		return *x.Com3Dev
	}
	return ""
}

func (x *VMConfig) GetCom4() bool {
	if x != nil && x.Com4 != nil {
		return *x.Com4
	}
	return false
}

func (x *VMConfig) GetCom4Dev() string {
	if x != nil && x.Com4Dev != nil {
		return *x.Com4Dev
	}
	return ""
}

func (x *VMConfig) GetExtraArgs() string {
	if x != nil && x.ExtraArgs != nil {
		return *x.ExtraArgs
	}
	return ""
}

func (x *VMConfig) GetCom1Log() bool {
	if x != nil && x.Com1Log != nil {
		return *x.Com1Log
	}
	return false
}

func (x *VMConfig) GetCom2Log() bool {
	if x != nil && x.Com2Log != nil {
		return *x.Com2Log
	}
	return false
}

func (x *VMConfig) GetCom3Log() bool {
	if x != nil && x.Com3Log != nil {
		return *x.Com3Log
	}
	return false
}

func (x *VMConfig) GetCom4Log() bool {
	if x != nil && x.Com4Log != nil {
		return *x.Com4Log
	}
	return false
}

func (x *VMConfig) GetCom1Speed() uint32 {
	if x != nil && x.Com1Speed != nil {
		return *x.Com1Speed
	}
	return 0
}

func (x *VMConfig) GetCom2Speed() uint32 {
	if x != nil && x.Com2Speed != nil {
		return *x.Com2Speed
	}
	return 0
}

func (x *VMConfig) GetCom3Speed() uint32 {
	if x != nil && x.Com3Speed != nil {
		return *x.Com3Speed
	}
	return 0
}

func (x *VMConfig) GetCom4Speed() uint32 {
	if x != nil && x.Com4Speed != nil {
		return *x.Com4Speed
	}
	return 0
}

func (x *VMConfig) GetAutostartDelay() uint32 {
	if x != nil && x.AutostartDelay != nil {
		return *x.AutostartDelay
	}
	return 0
}

func (x *VMConfig) GetDebug() bool {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return false
}

func (x *VMConfig) GetDebugWait() bool {
	if x != nil && x.DebugWait != nil {
		return *x.DebugWait
	}
	return false
}

func (x *VMConfig) GetDebugPort() string {
	if x != nil && x.DebugPort != nil {
		return *x.DebugPort
	}
	return ""
}

func (x *VMConfig) GetPriority() int32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *VMConfig) GetProtect() bool {
	if x != nil && x.Protect != nil {
		return *x.Protect
	}
	return false
}

func (x *VMConfig) GetPcpu() uint32 {
	if x != nil && x.Pcpu != nil {
		return *x.Pcpu
	}
	return 0
}

func (x *VMConfig) GetRbps() uint32 {
	if x != nil && x.Rbps != nil {
		return *x.Rbps
	}
	return 0
}

func (x *VMConfig) GetWbps() uint32 {
	if x != nil && x.Wbps != nil {
		return *x.Wbps
	}
	return 0
}

func (x *VMConfig) GetRiops() uint32 {
	if x != nil && x.Riops != nil {
		return *x.Riops
	}
	return 0
}

func (x *VMConfig) GetWiops() uint32 {
	if x != nil && x.Wiops != nil {
		return *x.Wiops
	}
	return 0
}

type VMsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VMsQuery) Reset() {
	*x = VMsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMsQuery) ProtoMessage() {}

func (x *VMsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMsQuery.ProtoReflect.Descriptor instead.
func (*VMsQuery) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{19}
}

type ISOsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ISOsQuery) Reset() {
	*x = ISOsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISOsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISOsQuery) ProtoMessage() {}

func (x *ISOsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISOsQuery.ProtoReflect.Descriptor instead.
func (*ISOsQuery) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{20}
}

type KbdQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KbdQuery) Reset() {
	*x = KbdQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KbdQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KbdQuery) ProtoMessage() {}

func (x *KbdQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KbdQuery.ProtoReflect.Descriptor instead.
func (*KbdQuery) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{21}
}

type DisksQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisksQuery) Reset() {
	*x = DisksQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisksQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisksQuery) ProtoMessage() {}

func (x *DisksQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisksQuery.ProtoReflect.Descriptor instead.
func (*DisksQuery) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{22}
}

type SwitchesQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SwitchesQuery) Reset() {
	*x = SwitchesQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchesQuery) ProtoMessage() {}

func (x *SwitchesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchesQuery.ProtoReflect.Descriptor instead.
func (*SwitchesQuery) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{23}
}

type VmNicsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VmNicsQuery) Reset() {
	*x = VmNicsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmNicsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmNicsQuery) ProtoMessage() {}

func (x *VmNicsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmNicsQuery.ProtoReflect.Descriptor instead.
func (*VmNicsQuery) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{24}
}

type RequestID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RequestID) Reset() {
	*x = RequestID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestID) ProtoMessage() {}

func (x *RequestID) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestID.ProtoReflect.Descriptor instead.
func (*RequestID) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{25}
}

func (x *RequestID) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ReqStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Complete bool `protobuf:"varint,1,opt,name=complete,proto3" json:"complete,omitempty"`
	Success  bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ReqStatus) Reset() {
	*x = ReqStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStatus) ProtoMessage() {}

func (x *ReqStatus) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStatus.ProtoReflect.Descriptor instead.
func (*ReqStatus) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{26}
}

func (x *ReqStatus) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *ReqStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type VMState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    VmStatus `protobuf:"varint,1,opt,name=status,proto3,enum=cirrina.VmStatus" json:"status,omitempty"`
	VncPort   int32    `protobuf:"varint,2,opt,name=VncPort,proto3" json:"VncPort,omitempty"`
	DebugPort int32    `protobuf:"varint,3,opt,name=DebugPort,proto3" json:"DebugPort,omitempty"`
}

func (x *VMState) Reset() {
	*x = VMState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VMState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMState) ProtoMessage() {}

func (x *VMState) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMState.ProtoReflect.Descriptor instead.
func (*VMState) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{27}
}

func (x *VMState) GetStatus() VmStatus {
	if x != nil {
		return x.Status
	}
	return VmStatus_STATUS_STOPPED
}

func (x *VMState) GetVncPort() int32 {
	if x != nil {
		return x.VncPort
	}
	return 0
}

func (x *VMState) GetDebugPort() int32 {
	if x != nil {
		return x.DebugPort
	}
	return 0
}

type ReqBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ReqBool) Reset() {
	*x = ReqBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBool) ProtoMessage() {}

func (x *ReqBool) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBool.ProtoReflect.Descriptor instead.
func (*ReqBool) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{28}
}

func (x *ReqBool) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ISOID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ISOID) Reset() {
	*x = ISOID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISOID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISOID) ProtoMessage() {}

func (x *ISOID) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISOID.ProtoReflect.Descriptor instead.
func (*ISOID) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{29}
}

func (x *ISOID) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ISOInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Size        *uint64 `protobuf:"varint,3,opt,name=size,proto3,oneof" json:"size,omitempty"`
}

func (x *ISOInfo) Reset() {
	*x = ISOInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISOInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISOInfo) ProtoMessage() {}

func (x *ISOInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISOInfo.ProtoReflect.Descriptor instead.
func (*ISOInfo) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{30}
}

func (x *ISOInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ISOInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ISOInfo) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type ISOUploadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isoid     *ISOID `protobuf:"bytes,1,opt,name=isoid,proto3" json:"isoid,omitempty"`
	Size      uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Sha512Sum string `protobuf:"bytes,3,opt,name=sha512sum,proto3" json:"sha512sum,omitempty"`
}

func (x *ISOUploadInfo) Reset() {
	*x = ISOUploadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISOUploadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISOUploadInfo) ProtoMessage() {}

func (x *ISOUploadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISOUploadInfo.ProtoReflect.Descriptor instead.
func (*ISOUploadInfo) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{31}
}

func (x *ISOUploadInfo) GetIsoid() *ISOID {
	if x != nil {
		return x.Isoid
	}
	return nil
}

func (x *ISOUploadInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ISOUploadInfo) GetSha512Sum() string {
	if x != nil {
		return x.Sha512Sum
	}
	return ""
}

type ISOImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*ISOImageRequest_Isouploadinfo
	//	*ISOImageRequest_Image
	Data isISOImageRequest_Data `protobuf_oneof:"data"`
}

func (x *ISOImageRequest) Reset() {
	*x = ISOImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ISOImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ISOImageRequest) ProtoMessage() {}

func (x *ISOImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ISOImageRequest.ProtoReflect.Descriptor instead.
func (*ISOImageRequest) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{32}
}

func (m *ISOImageRequest) GetData() isISOImageRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ISOImageRequest) GetIsouploadinfo() *ISOUploadInfo {
	if x, ok := x.GetData().(*ISOImageRequest_Isouploadinfo); ok {
		return x.Isouploadinfo
	}
	return nil
}

func (x *ISOImageRequest) GetImage() []byte {
	if x, ok := x.GetData().(*ISOImageRequest_Image); ok {
		return x.Image
	}
	return nil
}

type isISOImageRequest_Data interface {
	isISOImageRequest_Data()
}

type ISOImageRequest_Isouploadinfo struct {
	Isouploadinfo *ISOUploadInfo `protobuf:"bytes,1,opt,name=isouploadinfo,proto3,oneof"`
}

type ISOImageRequest_Image struct {
	Image []byte `protobuf:"bytes,2,opt,name=image,proto3,oneof"`
}

func (*ISOImageRequest_Isouploadinfo) isISOImageRequest_Data() {}

func (*ISOImageRequest_Image) isISOImageRequest_Data() {}

type DiskUploadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diskid    *DiskId `protobuf:"bytes,1,opt,name=diskid,proto3" json:"diskid,omitempty"`
	Size      uint64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Sha512Sum string  `protobuf:"bytes,3,opt,name=sha512sum,proto3" json:"sha512sum,omitempty"`
}

func (x *DiskUploadInfo) Reset() {
	*x = DiskUploadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskUploadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskUploadInfo) ProtoMessage() {}

func (x *DiskUploadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskUploadInfo.ProtoReflect.Descriptor instead.
func (*DiskUploadInfo) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{33}
}

func (x *DiskUploadInfo) GetDiskid() *DiskId {
	if x != nil {
		return x.Diskid
	}
	return nil
}

func (x *DiskUploadInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DiskUploadInfo) GetSha512Sum() string {
	if x != nil {
		return x.Sha512Sum
	}
	return ""
}

type DiskImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*DiskImageRequest_Diskuploadinfo
	//	*DiskImageRequest_Image
	Data isDiskImageRequest_Data `protobuf_oneof:"data"`
}

func (x *DiskImageRequest) Reset() {
	*x = DiskImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskImageRequest) ProtoMessage() {}

func (x *DiskImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskImageRequest.ProtoReflect.Descriptor instead.
func (*DiskImageRequest) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{34}
}

func (m *DiskImageRequest) GetData() isDiskImageRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *DiskImageRequest) GetDiskuploadinfo() *DiskUploadInfo {
	if x, ok := x.GetData().(*DiskImageRequest_Diskuploadinfo); ok {
		return x.Diskuploadinfo
	}
	return nil
}

func (x *DiskImageRequest) GetImage() []byte {
	if x, ok := x.GetData().(*DiskImageRequest_Image); ok {
		return x.Image
	}
	return nil
}

type isDiskImageRequest_Data interface {
	isDiskImageRequest_Data()
}

type DiskImageRequest_Diskuploadinfo struct {
	Diskuploadinfo *DiskUploadInfo `protobuf:"bytes,1,opt,name=diskuploadinfo,proto3,oneof"`
}

type DiskImageRequest_Image struct {
	Image []byte `protobuf:"bytes,2,opt,name=image,proto3,oneof"`
}

func (*DiskImageRequest_Diskuploadinfo) isDiskImageRequest_Data() {}

func (*DiskImageRequest_Image) isDiskImageRequest_Data() {}

type ComDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*ComDataRequest_VmId
	//	*ComDataRequest_ComInBytes
	Data isComDataRequest_Data `protobuf_oneof:"data"`
}

func (x *ComDataRequest) Reset() {
	*x = ComDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComDataRequest) ProtoMessage() {}

func (x *ComDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComDataRequest.ProtoReflect.Descriptor instead.
func (*ComDataRequest) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{35}
}

func (m *ComDataRequest) GetData() isComDataRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ComDataRequest) GetVmId() *VMID {
	if x, ok := x.GetData().(*ComDataRequest_VmId); ok {
		return x.VmId
	}
	return nil
}

func (x *ComDataRequest) GetComInBytes() []byte {
	if x, ok := x.GetData().(*ComDataRequest_ComInBytes); ok {
		return x.ComInBytes
	}
	return nil
}

type isComDataRequest_Data interface {
	isComDataRequest_Data()
}

type ComDataRequest_VmId struct {
	VmId *VMID `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3,oneof"`
}

type ComDataRequest_ComInBytes struct {
	ComInBytes []byte `protobuf:"bytes,2,opt,name=com_in_bytes,json=comInBytes,proto3,oneof"`
}

func (*ComDataRequest_VmId) isComDataRequest_Data() {}

func (*ComDataRequest_ComInBytes) isComDataRequest_Data() {}

type ComDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComOutBytes []byte `protobuf:"bytes,2,opt,name=com_out_bytes,json=comOutBytes,proto3" json:"com_out_bytes,omitempty"`
}

func (x *ComDataResponse) Reset() {
	*x = ComDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cirrina_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComDataResponse) ProtoMessage() {}

func (x *ComDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cirrina_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComDataResponse.ProtoReflect.Descriptor instead.
func (*ComDataResponse) Descriptor() ([]byte, []int) {
	return file_cirrina_proto_rawDescGZIP(), []int{36}
}

func (x *ComDataResponse) GetComOutBytes() []byte {
	if x != nil {
		return x.ComOutBytes
	}
	return nil
}

var File_cirrina_proto protoreflect.FileDescriptor

var file_cirrina_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1c, 0x0a, 0x04, 0x56, 0x4d, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x1e, 0x0a, 0x06, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x08, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1f, 0x0a, 0x07, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x49, 0x53, 0x4f,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x6f, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x69, 0x64, 0x22,
	0x39, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x76, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x6d, 0x6e, 0x69, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x6d, 0x6e, 0x69, 0x63, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x11, 0x53, 0x65,
	0x74, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12,
	0x2a, 0x0a, 0x07, 0x76, 0x6d, 0x6e, 0x69, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x6d, 0x4e, 0x69, 0x63,
	0x49, 0x64, 0x52, 0x07, 0x76, 0x6d, 0x6e, 0x69, 0x63, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x0f, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x2d, 0x0a,
	0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06,
	0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x41, 0x0a, 0x09, 0x4b, 0x62, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe8, 0x03, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x05, 0x52, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x06, 0x52, 0x08, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52,
	0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x06, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x22, 0xfc, 0x02, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x69, 0x72,
	0x72, 0x69, 0x6e, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x04, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x05, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52,
	0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x22, 0x12, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x2d, 0x0a, 0x05, 0x4e, 0x65, 0x74, 0x49, 0x66, 0x12, 0x24,
	0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x0a, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69,
	0x6e, 0x61, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52,
	0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x22,
	0xee, 0x01, 0x0a, 0x10, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x69, 0x6e, 0x61, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02,
	0x52, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x06, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x22, 0xdd, 0x03, 0x0a, 0x09, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x03, 0x6d,
	0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x64, 0x65, 0x76, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x69, 0x6e, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x44, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03,
	0x52, 0x0a, 0x6e, 0x65, 0x74, 0x64, 0x65, 0x76, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x04, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x76, 0x6d, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x04, 0x76, 0x6d, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x61,
	0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52,
	0x09, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x08, 0x52,
	0x06, 0x72, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x61,
	0x74, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x09, 0x52, 0x07, 0x72,
	0x61, 0x74, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e,
	0x65, 0x74, 0x64, 0x65, 0x76, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x65,
	0x74, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x6d, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x69, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0x8b, 0x03, 0x0a, 0x0f, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x76, 0x6d, 0x6e, 0x69, 0x63, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e,
	0x56, 0x6d, 0x4e, 0x69, 0x63, 0x49, 0x64, 0x52, 0x07, 0x76, 0x6d, 0x6e, 0x69, 0x63, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x03, 0x6d, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x64, 0x65,
	0x76, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x44, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x64, 0x65, 0x76, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x4e, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x74, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x76, 0x6d, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x04, 0x76, 0x6d, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x63, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6e, 0x65, 0x74, 0x64, 0x65, 0x76, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x6e, 0x65, 0x74, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x6d, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x64, 0x22, 0xca,
	0x12, 0x0a, 0x08, 0x56, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63,
	0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x03, 0x63, 0x70, 0x75, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x03, 0x52, 0x03, 0x6d, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x57, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x06, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09,
	0x52, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x6e, 0x63, 0x77, 0x61, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0a, 0x52, 0x07, 0x76, 0x6e, 0x63, 0x77, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6d,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x0c, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x06, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x75,
	0x65, 0x66, 0x69, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x75, 0x65, 0x66, 0x69, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x74, 0x63,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0e, 0x52, 0x03, 0x75, 0x74, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x63, 0x70, 0x69, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x04, 0x61, 0x63, 0x70, 0x69, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x68, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x48, 0x11, 0x52, 0x03, 0x68,
	0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x6f, 0x70, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x12, 0x52, 0x03, 0x65, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x64, 0x70, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x03, 0x64, 0x70, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x75, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x14, 0x52, 0x03, 0x69, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x6e,
	0x63, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x07, 0x76,
	0x6e, 0x63, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x17, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x18, 0x52, 0x05,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x07, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f,
	0x6d, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x31, 0x64, 0x65, 0x76, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1c, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x31, 0x64, 0x65, 0x76, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x32, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x1d, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x32, 0x64, 0x65, 0x76, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x32, 0x64, 0x65, 0x76, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f,
	0x6d, 0x33, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1f, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x33,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x33, 0x64, 0x65, 0x76, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x33, 0x64, 0x65, 0x76, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x34, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x21, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x34, 0x64, 0x65, 0x76, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x34, 0x64, 0x65, 0x76, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x31, 0x6c, 0x6f, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x24, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x31, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x32, 0x6c, 0x6f, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x25,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x32, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x33, 0x6c, 0x6f, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x26, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x33, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x34, 0x6c, 0x6f, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x27, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x34, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x31, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x28, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x31, 0x73, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x32, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x29, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x32, 0x73, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x33, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x2a, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x33, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x34, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x2b, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x34, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x2c, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x2d, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x2e, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x57, 0x61, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2f, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x48, 0x30, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x48, 0x31, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x63, 0x70, 0x75, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x32, 0x52, 0x04, 0x70, 0x63, 0x70, 0x75, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x72, 0x62, 0x70, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x33,
	0x52, 0x04, 0x72, 0x62, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x77, 0x62, 0x70,
	0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x34, 0x52, 0x04, 0x77, 0x62, 0x70, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x35, 0x52, 0x05, 0x72, 0x69, 0x6f, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x77, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x36, 0x52, 0x05,
	0x77, 0x69, 0x6f, 0x70, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x70, 0x75, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x65,
	0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76,
	0x6e, 0x63, 0x77, 0x61, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x69, 0x72, 0x65, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x75, 0x65, 0x66, 0x69,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x74, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x63, 0x70, 0x69,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x68, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6f, 0x70,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x64, 0x70, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x75, 0x6d,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x6e, 0x63, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6f, 0x75, 0x6e,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x63, 0x6f, 0x6d, 0x31, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x31, 0x64, 0x65,
	0x76, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6d, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x6f, 0x6d, 0x32, 0x64, 0x65, 0x76, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6d, 0x33, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x33, 0x64, 0x65, 0x76, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x63, 0x6f, 0x6d, 0x34, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x34, 0x64, 0x65, 0x76,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x31, 0x6c, 0x6f, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x6f, 0x6d, 0x32, 0x6c, 0x6f, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x33,
	0x6c, 0x6f, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x34, 0x6c, 0x6f, 0x67, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6d, 0x31, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x6f, 0x6d, 0x32, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x63, 0x6f, 0x6d, 0x33, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f,
	0x6d, 0x34, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x63, 0x70, 0x75, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x62, 0x70, 0x73, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x77, 0x62, 0x70, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x69, 0x6f, 0x70,
	0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x69, 0x6f, 0x70, 0x73, 0x22, 0x0a, 0x0a, 0x08, 0x56,
	0x4d, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x0b, 0x0a, 0x09, 0x49, 0x53, 0x4f, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x22, 0x0a, 0x0a, 0x08, 0x4b, 0x62, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x0c, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x0f,
	0x0a, 0x0d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x0d, 0x0a, 0x0b, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x21,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x41, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x6c, 0x0a, 0x07, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x76, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x6e,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x56, 0x6e, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0x23, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x1d, 0x0a, 0x05, 0x49, 0x53, 0x4f, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x07, 0x49, 0x53, 0x4f, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x67, 0x0a,
	0x0d, 0x49, 0x53, 0x4f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x0a, 0x05, 0x69, 0x73, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x49, 0x53, 0x4f, 0x49, 0x44, 0x52, 0x05, 0x69,
	0x73, 0x6f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x35,
	0x31, 0x32, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61,
	0x35, 0x31, 0x32, 0x73, 0x75, 0x6d, 0x22, 0x71, 0x0a, 0x0f, 0x49, 0x53, 0x4f, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x69, 0x73, 0x6f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x49, 0x53, 0x4f, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x73, 0x6f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6b, 0x0a, 0x0e, 0x44, 0x69, 0x73,
	0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x06, 0x64,
	0x69, 0x73, 0x6b, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x06, 0x64, 0x69,
	0x73, 0x6b, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x35,
	0x31, 0x32, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61,
	0x35, 0x31, 0x32, 0x73, 0x75, 0x6d, 0x22, 0x75, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x6b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x64,
	0x69, 0x73, 0x6b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49, 0x44, 0x48, 0x00, 0x52,
	0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x35, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x4f, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x2a, 0x23, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x31, 0x30, 0x30, 0x30, 0x10, 0x01, 0x2a, 0x2f, 0x0a,
	0x08, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x56, 0x4d,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x48, 0x43, 0x49, 0x48, 0x44, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x56, 0x49, 0x52, 0x54, 0x49, 0x4f, 0x42, 0x4c, 0x4b, 0x10, 0x02, 0x2a, 0x21,
	0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x56, 0x4f, 0x4c, 0x10,
	0x01, 0x2a, 0x1c, 0x0a, 0x0a, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x49, 0x46, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x47, 0x10, 0x01, 0x2a,
	0x2e, 0x0a, 0x0a, 0x4e, 0x65, 0x74, 0x44, 0x65, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x54, 0x41, 0x50, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x4d, 0x4e, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x45, 0x54, 0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0x02, 0x2a,
	0x5c, 0x0a, 0x08, 0x76, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x32, 0xac, 0x15,
	0x0a, 0x06, 0x56, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x05, 0x41, 0x64, 0x64, 0x56,
	0x4d, 0x12, 0x11, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x0d, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56,
	0x4d, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x73, 0x12, 0x11, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x0d, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49, 0x44, 0x30,
	0x01, 0x12, 0x2f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x0d, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49, 0x44, 0x1a,
	0x11, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x56, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0d, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49, 0x44, 0x1a, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x56, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0d, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e,
	0x56, 0x4d, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0d, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49,
	0x44, 0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x12,
	0x11, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x4d, 0x12,
	0x0d, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49, 0x44, 0x1a, 0x12,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x12, 0x0d, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x2d, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x4d, 0x12, 0x0d, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x63, 0x69, 0x72,
	0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x31,
	0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x55, 0x45, 0x46, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0d, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49, 0x44, 0x1a,
	0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x6f,
	0x6c, 0x12, 0x42, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x69, 0x6e, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x4e,
	0x65, 0x74, 0x49, 0x66, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e,
	0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e,
	0x4b, 0x62, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x12, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69,
	0x6e, 0x61, 0x2e, 0x4b, 0x62, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x30, 0x01, 0x12, 0x2f,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x53, 0x4f, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x69, 0x6e, 0x61, 0x2e, 0x49, 0x53, 0x4f, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0e, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x49, 0x53, 0x4f, 0x49, 0x44, 0x30, 0x01, 0x12,
	0x2e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x49, 0x53, 0x4f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x49, 0x53, 0x4f, 0x49, 0x44, 0x1a, 0x10, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x49, 0x53, 0x4f, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2a, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x49, 0x53, 0x4f, 0x12, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x69, 0x6e, 0x61, 0x2e, 0x49, 0x53, 0x4f, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0e, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x49, 0x53, 0x4f, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x09, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x53, 0x4f, 0x12, 0x0e, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69,
	0x6e, 0x61, 0x2e, 0x49, 0x53, 0x4f, 0x49, 0x44, 0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69,
	0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x09, 0x53, 0x65,
	0x74, 0x56, 0x6d, 0x49, 0x53, 0x4f, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e,
	0x61, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x53, 0x4f, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x2c, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x56, 0x6d, 0x49, 0x53, 0x4f, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x69, 0x72,
	0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49, 0x44, 0x1a, 0x0e, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x69, 0x6e, 0x61, 0x2e, 0x49, 0x53, 0x4f, 0x49, 0x44, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x73, 0x6f, 0x12, 0x18, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69,
	0x6e, 0x61, 0x2e, 0x49, 0x53, 0x4f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x42, 0x6f, 0x6f, 0x6c, 0x28, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x73, 0x12, 0x13, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e,
	0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x30, 0x01, 0x12, 0x31, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x69, 0x6e, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x63, 0x69, 0x72,
	0x72, 0x69, 0x6e, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a,
	0x0b, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x44, 0x69,
	0x73, 0x6b, 0x12, 0x11, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0f, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x12, 0x0f, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x56, 0x6d,
	0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x13, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e,
	0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72,
	0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x56, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x0d, 0x2e, 0x63, 0x69, 0x72,
	0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49, 0x44, 0x1a, 0x0f, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x69, 0x6e, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x30, 0x01, 0x12, 0x2b, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x56, 0x6d, 0x12, 0x0f, 0x2e, 0x63, 0x69, 0x72, 0x72,
	0x69, 0x6e, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x69, 0x72,
	0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0a, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e,
	0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x42, 0x6f, 0x6f, 0x6c, 0x28, 0x01, 0x12, 0x3a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x11, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x30, 0x01, 0x12, 0x37, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69,
	0x6e, 0x61, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x10, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x33,
	0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x11,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x3d, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f,
	0x6f, 0x6c, 0x12, 0x38, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x73, 0x41,
	0x6c, 0x6c, 0x12, 0x14, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x6d, 0x4e,
	0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69,
	0x6e, 0x61, 0x2e, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x49, 0x64, 0x30, 0x01, 0x12, 0x34, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x2e, 0x63,
	0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x49, 0x64, 0x1a, 0x12,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x30, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x12, 0x12,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x6d, 0x4e,
	0x69, 0x63, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6d,
	0x4e, 0x69, 0x63, 0x12, 0x18, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x6d,
	0x4e, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x10, 0x2e,
	0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x6f, 0x6c, 0x12,
	0x31, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x12, 0x10,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x49, 0x64,
	0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f,
	0x6f, 0x6c, 0x12, 0x3e, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x53,
	0x65, 0x74, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f,
	0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x56, 0x6d,
	0x12, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x6d, 0x4e, 0x69, 0x63,
	0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49,
	0x44, 0x12, 0x31, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x56, 0x6d, 0x4e, 0x69, 0x63, 0x73, 0x12, 0x12,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x56, 0x6d, 0x4e, 0x69, 0x63,
	0x73, 0x12, 0x0d, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x4d, 0x49, 0x44,
	0x1a, 0x10, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x56, 0x6d, 0x4e, 0x69, 0x63,
	0x49, 0x64, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x31, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e,
	0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x48,
	0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x32, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x17, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x69, 0x72,
	0x72, 0x69, 0x6e, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x33,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x69,
	0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x43,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e,
	0x43, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x20, 0x5a, 0x1e,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x6d, 0x6f, 0x75, 0x66, 0x2e, 0x6e, 0x65, 0x74, 0x2f,
	0x73, 0x77, 0x69, 0x6c, 0x6c, 0x73, 0x2f, 0x63, 0x69, 0x72, 0x72, 0x69, 0x6e, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cirrina_proto_rawDescOnce sync.Once
	file_cirrina_proto_rawDescData = file_cirrina_proto_rawDesc
)

func file_cirrina_proto_rawDescGZIP() []byte {
	file_cirrina_proto_rawDescOnce.Do(func() {
		file_cirrina_proto_rawDescData = protoimpl.X.CompressGZIP(file_cirrina_proto_rawDescData)
	})
	return file_cirrina_proto_rawDescData
}

var file_cirrina_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_cirrina_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_cirrina_proto_goTypes = []interface{}{
	(NetType)(0),                   // 0: cirrina.NetType
	(DiskType)(0),                  // 1: cirrina.DiskType
	(DiskDevType)(0),               // 2: cirrina.DiskDevType
	(SwitchType)(0),                // 3: cirrina.SwitchType
	(NetDevType)(0),                // 4: cirrina.NetDevType
	(VmStatus)(0),                  // 5: cirrina.vmStatus
	(*VMID)(nil),                   // 6: cirrina.VMID
	(*DiskId)(nil),                 // 7: cirrina.DiskId
	(*SwitchId)(nil),               // 8: cirrina.SwitchId
	(*VmNicId)(nil),                // 9: cirrina.VmNicId
	(*SetISOReq)(nil),              // 10: cirrina.SetISOReq
	(*SetDiskReq)(nil),             // 11: cirrina.SetDiskReq
	(*SetNicReq)(nil),              // 12: cirrina.SetNicReq
	(*SetVmNicSwitchReq)(nil),      // 13: cirrina.SetVmNicSwitchReq
	(*SwitchUplinkReq)(nil),        // 14: cirrina.SwitchUplinkReq
	(*KbdLayout)(nil),              // 15: cirrina.KbdLayout
	(*DiskInfo)(nil),               // 16: cirrina.DiskInfo
	(*DiskInfoUpdate)(nil),         // 17: cirrina.DiskInfoUpdate
	(*NetInterfacesReq)(nil),       // 18: cirrina.NetInterfacesReq
	(*NetIf)(nil),                  // 19: cirrina.NetIf
	(*SwitchInfo)(nil),             // 20: cirrina.SwitchInfo
	(*SwitchInfoUpdate)(nil),       // 21: cirrina.SwitchInfoUpdate
	(*VmNicInfo)(nil),              // 22: cirrina.VmNicInfo
	(*VmNicInfoUpdate)(nil),        // 23: cirrina.VmNicInfoUpdate
	(*VMConfig)(nil),               // 24: cirrina.VMConfig
	(*VMsQuery)(nil),               // 25: cirrina.VMsQuery
	(*ISOsQuery)(nil),              // 26: cirrina.ISOsQuery
	(*KbdQuery)(nil),               // 27: cirrina.KbdQuery
	(*DisksQuery)(nil),             // 28: cirrina.DisksQuery
	(*SwitchesQuery)(nil),          // 29: cirrina.SwitchesQuery
	(*VmNicsQuery)(nil),            // 30: cirrina.VmNicsQuery
	(*RequestID)(nil),              // 31: cirrina.RequestID
	(*ReqStatus)(nil),              // 32: cirrina.ReqStatus
	(*VMState)(nil),                // 33: cirrina.VMState
	(*ReqBool)(nil),                // 34: cirrina.ReqBool
	(*ISOID)(nil),                  // 35: cirrina.ISOID
	(*ISOInfo)(nil),                // 36: cirrina.ISOInfo
	(*ISOUploadInfo)(nil),          // 37: cirrina.ISOUploadInfo
	(*ISOImageRequest)(nil),        // 38: cirrina.ISOImageRequest
	(*DiskUploadInfo)(nil),         // 39: cirrina.DiskUploadInfo
	(*DiskImageRequest)(nil),       // 40: cirrina.DiskImageRequest
	(*ComDataRequest)(nil),         // 41: cirrina.ComDataRequest
	(*ComDataResponse)(nil),        // 42: cirrina.ComDataResponse
	(*wrapperspb.StringValue)(nil), // 43: google.protobuf.StringValue
	(*emptypb.Empty)(nil),          // 44: google.protobuf.Empty
}
var file_cirrina_proto_depIdxs = []int32{
	9,  // 0: cirrina.SetVmNicSwitchReq.vmnicid:type_name -> cirrina.VmNicId
	8,  // 1: cirrina.SetVmNicSwitchReq.switchid:type_name -> cirrina.SwitchId
	8,  // 2: cirrina.SwitchUplinkReq.switchid:type_name -> cirrina.SwitchId
	1,  // 3: cirrina.DiskInfo.disk_type:type_name -> cirrina.DiskType
	2,  // 4: cirrina.DiskInfo.disk_dev_type:type_name -> cirrina.DiskDevType
	1,  // 5: cirrina.DiskInfoUpdate.disk_type:type_name -> cirrina.DiskType
	2,  // 6: cirrina.DiskInfoUpdate.disk_dev_type:type_name -> cirrina.DiskDevType
	3,  // 7: cirrina.SwitchInfo.switch_type:type_name -> cirrina.SwitchType
	3,  // 8: cirrina.SwitchInfoUpdate.switch_type:type_name -> cirrina.SwitchType
	4,  // 9: cirrina.VmNicInfo.netdevtype:type_name -> cirrina.NetDevType
	0,  // 10: cirrina.VmNicInfo.nettype:type_name -> cirrina.NetType
	9,  // 11: cirrina.VmNicInfoUpdate.vmnicid:type_name -> cirrina.VmNicId
	4,  // 12: cirrina.VmNicInfoUpdate.netdevtype:type_name -> cirrina.NetDevType
	0,  // 13: cirrina.VmNicInfoUpdate.nettype:type_name -> cirrina.NetType
	5,  // 14: cirrina.VMState.status:type_name -> cirrina.vmStatus
	35, // 15: cirrina.ISOUploadInfo.isoid:type_name -> cirrina.ISOID
	37, // 16: cirrina.ISOImageRequest.isouploadinfo:type_name -> cirrina.ISOUploadInfo
	7,  // 17: cirrina.DiskUploadInfo.diskid:type_name -> cirrina.DiskId
	39, // 18: cirrina.DiskImageRequest.diskuploadinfo:type_name -> cirrina.DiskUploadInfo
	6,  // 19: cirrina.ComDataRequest.vm_id:type_name -> cirrina.VMID
	24, // 20: cirrina.VMInfo.AddVM:input_type -> cirrina.VMConfig
	25, // 21: cirrina.VMInfo.GetVMs:input_type -> cirrina.VMsQuery
	6,  // 22: cirrina.VMInfo.GetVMConfig:input_type -> cirrina.VMID
	6,  // 23: cirrina.VMInfo.GetVmName:input_type -> cirrina.VMID
	43, // 24: cirrina.VMInfo.GetVmId:input_type -> google.protobuf.StringValue
	6,  // 25: cirrina.VMInfo.GetVMState:input_type -> cirrina.VMID
	24, // 26: cirrina.VMInfo.UpdateVM:input_type -> cirrina.VMConfig
	6,  // 27: cirrina.VMInfo.StartVM:input_type -> cirrina.VMID
	6,  // 28: cirrina.VMInfo.StopVM:input_type -> cirrina.VMID
	6,  // 29: cirrina.VMInfo.DeleteVM:input_type -> cirrina.VMID
	6,  // 30: cirrina.VMInfo.ClearUEFIState:input_type -> cirrina.VMID
	44, // 31: cirrina.VMInfo.GetVersion:input_type -> google.protobuf.Empty
	18, // 32: cirrina.VMInfo.GetNetInterfaces:input_type -> cirrina.NetInterfacesReq
	31, // 33: cirrina.VMInfo.RequestStatus:input_type -> cirrina.RequestID
	27, // 34: cirrina.VMInfo.GetKeyboardLayouts:input_type -> cirrina.KbdQuery
	26, // 35: cirrina.VMInfo.GetISOs:input_type -> cirrina.ISOsQuery
	35, // 36: cirrina.VMInfo.GetISOInfo:input_type -> cirrina.ISOID
	36, // 37: cirrina.VMInfo.AddISO:input_type -> cirrina.ISOInfo
	35, // 38: cirrina.VMInfo.RemoveISO:input_type -> cirrina.ISOID
	10, // 39: cirrina.VMInfo.SetVmISOs:input_type -> cirrina.SetISOReq
	6,  // 40: cirrina.VMInfo.GetVmISOs:input_type -> cirrina.VMID
	38, // 41: cirrina.VMInfo.UploadIso:input_type -> cirrina.ISOImageRequest
	28, // 42: cirrina.VMInfo.GetDisks:input_type -> cirrina.DisksQuery
	7,  // 43: cirrina.VMInfo.GetDiskInfo:input_type -> cirrina.DiskId
	17, // 44: cirrina.VMInfo.SetDiskInfo:input_type -> cirrina.DiskInfoUpdate
	16, // 45: cirrina.VMInfo.AddDisk:input_type -> cirrina.DiskInfo
	7,  // 46: cirrina.VMInfo.RemoveDisk:input_type -> cirrina.DiskId
	11, // 47: cirrina.VMInfo.SetVmDisks:input_type -> cirrina.SetDiskReq
	6,  // 48: cirrina.VMInfo.GetVmDisks:input_type -> cirrina.VMID
	7,  // 49: cirrina.VMInfo.GetDiskVm:input_type -> cirrina.DiskId
	40, // 50: cirrina.VMInfo.UploadDisk:input_type -> cirrina.DiskImageRequest
	29, // 51: cirrina.VMInfo.GetSwitches:input_type -> cirrina.SwitchesQuery
	8,  // 52: cirrina.VMInfo.GetSwitchInfo:input_type -> cirrina.SwitchId
	20, // 53: cirrina.VMInfo.AddSwitch:input_type -> cirrina.SwitchInfo
	21, // 54: cirrina.VMInfo.SetSwitchInfo:input_type -> cirrina.SwitchInfoUpdate
	8,  // 55: cirrina.VMInfo.RemoveSwitch:input_type -> cirrina.SwitchId
	14, // 56: cirrina.VMInfo.SetSwitchUplink:input_type -> cirrina.SwitchUplinkReq
	30, // 57: cirrina.VMInfo.GetVmNicsAll:input_type -> cirrina.VmNicsQuery
	9,  // 58: cirrina.VMInfo.GetVmNicInfo:input_type -> cirrina.VmNicId
	22, // 59: cirrina.VMInfo.AddVmNic:input_type -> cirrina.VmNicInfo
	23, // 60: cirrina.VMInfo.UpdateVmNic:input_type -> cirrina.VmNicInfoUpdate
	9,  // 61: cirrina.VMInfo.RemoveVmNic:input_type -> cirrina.VmNicId
	13, // 62: cirrina.VMInfo.SetVmNicSwitch:input_type -> cirrina.SetVmNicSwitchReq
	9,  // 63: cirrina.VMInfo.GetVmNicVm:input_type -> cirrina.VmNicId
	12, // 64: cirrina.VMInfo.SetVmNics:input_type -> cirrina.SetNicReq
	6,  // 65: cirrina.VMInfo.GetVmNics:input_type -> cirrina.VMID
	41, // 66: cirrina.VMInfo.Com1Interactive:input_type -> cirrina.ComDataRequest
	41, // 67: cirrina.VMInfo.Com2Interactive:input_type -> cirrina.ComDataRequest
	41, // 68: cirrina.VMInfo.Com3Interactive:input_type -> cirrina.ComDataRequest
	41, // 69: cirrina.VMInfo.Com4Interactive:input_type -> cirrina.ComDataRequest
	6,  // 70: cirrina.VMInfo.AddVM:output_type -> cirrina.VMID
	6,  // 71: cirrina.VMInfo.GetVMs:output_type -> cirrina.VMID
	24, // 72: cirrina.VMInfo.GetVMConfig:output_type -> cirrina.VMConfig
	43, // 73: cirrina.VMInfo.GetVmName:output_type -> google.protobuf.StringValue
	6,  // 74: cirrina.VMInfo.GetVmId:output_type -> cirrina.VMID
	33, // 75: cirrina.VMInfo.GetVMState:output_type -> cirrina.VMState
	34, // 76: cirrina.VMInfo.UpdateVM:output_type -> cirrina.ReqBool
	31, // 77: cirrina.VMInfo.StartVM:output_type -> cirrina.RequestID
	31, // 78: cirrina.VMInfo.StopVM:output_type -> cirrina.RequestID
	31, // 79: cirrina.VMInfo.DeleteVM:output_type -> cirrina.RequestID
	34, // 80: cirrina.VMInfo.ClearUEFIState:output_type -> cirrina.ReqBool
	43, // 81: cirrina.VMInfo.GetVersion:output_type -> google.protobuf.StringValue
	19, // 82: cirrina.VMInfo.GetNetInterfaces:output_type -> cirrina.NetIf
	32, // 83: cirrina.VMInfo.RequestStatus:output_type -> cirrina.ReqStatus
	15, // 84: cirrina.VMInfo.GetKeyboardLayouts:output_type -> cirrina.KbdLayout
	35, // 85: cirrina.VMInfo.GetISOs:output_type -> cirrina.ISOID
	36, // 86: cirrina.VMInfo.GetISOInfo:output_type -> cirrina.ISOInfo
	35, // 87: cirrina.VMInfo.AddISO:output_type -> cirrina.ISOID
	34, // 88: cirrina.VMInfo.RemoveISO:output_type -> cirrina.ReqBool
	34, // 89: cirrina.VMInfo.SetVmISOs:output_type -> cirrina.ReqBool
	35, // 90: cirrina.VMInfo.GetVmISOs:output_type -> cirrina.ISOID
	34, // 91: cirrina.VMInfo.UploadIso:output_type -> cirrina.ReqBool
	7,  // 92: cirrina.VMInfo.GetDisks:output_type -> cirrina.DiskId
	16, // 93: cirrina.VMInfo.GetDiskInfo:output_type -> cirrina.DiskInfo
	34, // 94: cirrina.VMInfo.SetDiskInfo:output_type -> cirrina.ReqBool
	7,  // 95: cirrina.VMInfo.AddDisk:output_type -> cirrina.DiskId
	34, // 96: cirrina.VMInfo.RemoveDisk:output_type -> cirrina.ReqBool
	34, // 97: cirrina.VMInfo.SetVmDisks:output_type -> cirrina.ReqBool
	7,  // 98: cirrina.VMInfo.GetVmDisks:output_type -> cirrina.DiskId
	6,  // 99: cirrina.VMInfo.GetDiskVm:output_type -> cirrina.VMID
	34, // 100: cirrina.VMInfo.UploadDisk:output_type -> cirrina.ReqBool
	8,  // 101: cirrina.VMInfo.GetSwitches:output_type -> cirrina.SwitchId
	20, // 102: cirrina.VMInfo.GetSwitchInfo:output_type -> cirrina.SwitchInfo
	8,  // 103: cirrina.VMInfo.AddSwitch:output_type -> cirrina.SwitchId
	34, // 104: cirrina.VMInfo.SetSwitchInfo:output_type -> cirrina.ReqBool
	34, // 105: cirrina.VMInfo.RemoveSwitch:output_type -> cirrina.ReqBool
	34, // 106: cirrina.VMInfo.SetSwitchUplink:output_type -> cirrina.ReqBool
	9,  // 107: cirrina.VMInfo.GetVmNicsAll:output_type -> cirrina.VmNicId
	22, // 108: cirrina.VMInfo.GetVmNicInfo:output_type -> cirrina.VmNicInfo
	9,  // 109: cirrina.VMInfo.AddVmNic:output_type -> cirrina.VmNicId
	34, // 110: cirrina.VMInfo.UpdateVmNic:output_type -> cirrina.ReqBool
	34, // 111: cirrina.VMInfo.RemoveVmNic:output_type -> cirrina.ReqBool
	34, // 112: cirrina.VMInfo.SetVmNicSwitch:output_type -> cirrina.ReqBool
	6,  // 113: cirrina.VMInfo.GetVmNicVm:output_type -> cirrina.VMID
	34, // 114: cirrina.VMInfo.SetVmNics:output_type -> cirrina.ReqBool
	9,  // 115: cirrina.VMInfo.GetVmNics:output_type -> cirrina.VmNicId
	42, // 116: cirrina.VMInfo.Com1Interactive:output_type -> cirrina.ComDataResponse
	42, // 117: cirrina.VMInfo.Com2Interactive:output_type -> cirrina.ComDataResponse
	42, // 118: cirrina.VMInfo.Com3Interactive:output_type -> cirrina.ComDataResponse
	42, // 119: cirrina.VMInfo.Com4Interactive:output_type -> cirrina.ComDataResponse
	70, // [70:120] is the sub-list for method output_type
	20, // [20:70] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_cirrina_proto_init() }
func file_cirrina_proto_init() {
	if File_cirrina_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cirrina_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmNicId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetISOReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDiskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVmNicSwitchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchUplinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KbdLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskInfoUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetInterfacesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchInfoUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmNicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmNicInfoUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISOsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KbdQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisksQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchesQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmNicsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VMState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISOID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISOInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISOUploadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ISOImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskUploadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cirrina_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cirrina_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_cirrina_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_cirrina_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_cirrina_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_cirrina_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_cirrina_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_cirrina_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_cirrina_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_cirrina_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_cirrina_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*ISOImageRequest_Isouploadinfo)(nil),
		(*ISOImageRequest_Image)(nil),
	}
	file_cirrina_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*DiskImageRequest_Diskuploadinfo)(nil),
		(*DiskImageRequest_Image)(nil),
	}
	file_cirrina_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*ComDataRequest_VmId)(nil),
		(*ComDataRequest_ComInBytes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cirrina_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cirrina_proto_goTypes,
		DependencyIndexes: file_cirrina_proto_depIdxs,
		EnumInfos:         file_cirrina_proto_enumTypes,
		MessageInfos:      file_cirrina_proto_msgTypes,
	}.Build()
	File_cirrina_proto = out.File
	file_cirrina_proto_rawDesc = nil
	file_cirrina_proto_goTypes = nil
	file_cirrina_proto_depIdxs = nil
}
