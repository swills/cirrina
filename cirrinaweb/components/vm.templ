package components

import "strconv"
import "fmt"

templ Vm(vms []VM, vm VM, listenHost string, websockifyPort uint16) {
    @layoutVMs("VM - " + vm.Name, vms, "/vmdata/" + vm.Name) {
        @vmTemplate(vm, listenHost, websockifyPort)
    }
}

templ VmDiskAdd(vmName string, vms []VM, vm VM, disks []Disk) {
    @layoutVMs("VM - " + vm.Name, vms, "") {
        @vmDiskAddTemplate(vmName, disks)
    }
}

templ VmISOAdd(vmName string, vms []VM, vm VM, isos []ISO) {
    @layoutVMs("VM - " + vm.Name, vms, "") {
        @vmISOAddTemplate(vmName, isos)
    }
}


templ VmNICAdd(vmName string, vms []VM, vm VM, nics []NIC) {
    @layoutVMs("VM - " + vm.Name, vms, "") {
        @vmNICAddTemplate(vmName, nics)
    }
}

templ VMDisksListComp(vm VM) {
            <div class="row m-0 mt-3">
                <div class="col-12 col-md border p-3">
                    Disks:
                    <div data-testid="vmsTemplateVMDisk">
                        for _, d := range vm.Disks {
                            <div data-testid="vmsTemplateDiskName">
                              <a class="text-decoration-none" href={ templ.URL("/media/disk/" + d.Name) }>{ d.Name }</a> (<a class="text-decoration-none" href={ templ.URL("/media/disk/" + d.ID)}>id</a>)
                            </div>
                        }
                    </div>
                </div>
            </div>
}

templ VMDisksEditComp(vm VM) {
            <div class="row m-0 mt-3">
                <div class="col-12 col-md border p-3">
                    Disks:
                    if !vm.Running {
                        @DiskAddButton(vm)
                    }
                    <div data-testid="vmsTemplateVMDisk">
                        for _, d := range vm.Disks {
                            <div data-testid="vmsTemplateDiskName"><a class="text-decoration-none" href={ templ.URL("/media/disk/" + d.Name) }>{ d.Name }</a> (<a class="text-decoration-none" href={ templ.URL("/media/disk/" + d.ID)}>id</a>)
                            if vm.NameOrID != "" && d.NameOrID != "" && !vm.Running {
                                @DisconnectDiskButton(vm, d)
                            }
                            </div>
                        }
                    </div>
                </div>
            </div>
}

templ VMISOsListComp(vm VM) {
            <div class="row m-0 mt-3">
                <div class="col-12 col-md border p-3">
                    ISOs:
                    <div data-testid="vmsTemplateVMISO">
                        for _, i := range vm.ISOs {
                            <div data-testid="vmsTemplateDiskName">
                              <a class="text-decoration-none" href={ templ.URL("/media/iso/" + i.Name) }>{ i.Name }</a> (<a class="text-decoration-none" href={ templ.URL("/media/iso/" + i.ID)}>id</a>)
                            </div>
                        }
                    </div>
                </div>
            </div>
}

templ VMISOsEditComp(vm VM) {
            <div class="row m-0 mt-3">
                <div class="col-12 col-md border p-3">
                    ISOs:
                    if !vm.Running {
                        @ISOAddButton(vm)
                    }
                    <div data-testid="vmsTemplateVMISO">
                        for _, i := range vm.ISOs {
                            <div data-testid="vmsTemplateDiskName"><a class="text-decoration-none" href={ templ.URL("/media/iso/" + i.Name) }>{ i.Name }</a> (<a class="text-decoration-none" href={ templ.URL("/media/iso/" + i.ID)}>id</a>)
                            if vm.NameOrID != "" && i.NameOrID != "" && !vm.Running {
                                @DisconnectISOButton(vm, i)
                            }
                            </div>
                        }
                    </div>
                </div>
            </div>
}

templ VMNICsListComp(vm VM) {
            <div class="row m-0 mt-3">
                <div class="col-12 col-md border p-3">
                    NICs:
                        <div data-testid="vmsTemplateVMNIC">
                            for _, n := range vm.NICs {
                                <div data-testid="vmsTemplateDiskName">
                                  <a class="text-decoration-none" href={ templ.URL("/net/nic/" + n.Name) }>{ n.Name }</a> (<a class="text-decoration-none" href={ templ.URL("/net/nic/" + n.ID)}>id</a>)
                                </div>
                            }
                        </div>
                </div>
            </div>
}

templ VMNICsEditComp(vm VM) {
            <div class="row m-0 mt-3">
                <div class="col-12 col-md border p-3">
                    NICs:
                    if !vm.Running {
                        @NICAddButton(vm)
                    }
                        <div data-testid="vmsTemplateVMNIC">
                            for _, n := range vm.NICs {
                                <div data-testid="vmsTemplateDiskName"><a class="text-decoration-none" href={ templ.URL("/net/nic/" + n.Name) }>{ n.Name }</a> (<a class="text-decoration-none" href={ templ.URL("/net/nic/" + n.ID)}>id</a>)
                                if vm.NameOrID != "" && n.NameOrID != "" && !vm.Running {
                                    @DisconnectNICButton(vm, n)
                                }
                                </div>
                            }
                        </div>
                </div>
            </div>
}

templ vmTemplate(vm VM, listenHost string, websockifyPort uint16) {
    {{ cpusStr := strconv.FormatUint(uint64(vm.CPUs), 10) }}
    {{ memoryStr := strconv.FormatUint(uint64(vm.Memory), 10) }}

    <div class="h4 mt-3 mt-md-0">/ <a class="text-decoration-none" href="/home">Cirrina</a> / <a class="text-decoration-none" href="/vm">VM</a> / { vm.NameOrID }</div>

    <div data-testid="vmTemplate" class="row m-0 mt-3 mt-md-0">
        <div data-testid="vmTemplateVM" class="col-12 col-md border p-3">
			<div data-testid="vmsTemplateVMName">VM Name: { vm.Name }</div>
			<div data-testid="vmsTemplateVMID">ID: { vm.ID }</div>
			<div data-testid="vmsTemplateVMCPUs">CPU Count: { cpusStr }</div>
			<div data-testid="vmsTemplateVMMem">Memory: { memoryStr } MiB</div>
			<div data-testid="vmsTemplateVMDescr">Description: { vm.Description }</div>
			if !vm.Running {
			<div data-testid="vmsTemplateVMEditButtons">Edit:
			  <a class="btn btn-outline-primary btn-sm border-0 me-1" href={ templ.URL("/vm/" + vm.NameOrID + "/editBasic") }>Basic</a>
			  <a class="btn btn-outline-primary btn-sm border-0 me-1" href={ templ.URL("/vm/" + vm.NameOrID + "/editDisk") }>Disk(s)</a>
			  <a class="btn btn-outline-primary btn-sm border-0 me-1" href={ templ.URL("/vm/" + vm.NameOrID + "/editISOs") }>ISO(s)</a>
			  <a class="btn btn-outline-primary btn-sm border-0 me-1" href={ templ.URL("/vm/" + vm.NameOrID + "/editNICs") }>NIC(s)</a>
			  <a class="btn btn-outline-primary btn-sm border-0 me-1" href={ templ.URL("/vm/" + vm.NameOrID + "/editSerial") }>Serial</a>
<!--
			  <a class="btn btn-outline-primary btn-sm border-0 me-1" href={ templ.URL("/vm/" + vm.NameOrID + "/editDisplay") }>Display</a>
			  <a class="btn btn-outline-primary btn-sm border-0 me-1" href={ templ.URL("/vm/" + vm.NameOrID + "/editAudio") }>Audio</a>
			  <a class="btn btn-outline-primary btn-sm border-0 me-1" href={ templ.URL("/vm/" + vm.NameOrID + "/editStart") }>Start</a>
			  <a class="btn btn-outline-primary btn-sm border-0 me-1" href={ templ.URL("/vm/" + vm.NameOrID + "/editAdvanced") }>Advanced</a>
-->
			</div>
			}
        </div>
    </div>

    <div data-testid="vmTemplate" class="row m-0 mt-3">
        <div data-testid="vmTemplateVM" class="col-12 col-md border p-3">
            if vm.Running {
                <div>VM is running</div>
                @StopButton(vm)
                if vm.VNCPort > 0 {
                    <div>VNC port is { fmt.Sprintf("%d", vm.VNCPort) }. <a target="_blank" href={ templ.URL("/vnc/vnc.html?autoconnect=true&reconnect=true&host=" + listenHost + "&port=" + strconv.FormatUint(uint64(websockifyPort), 10) + "&path=" + vm.NameOrID + "&resize=scale&reconnect=true") }>Open VNC</a> </div>
                }
            } else {
                <div>VM is not running</div>
                @StartButton(vm)
                @DeleteVMButton(vm)
            }
        </div>
    </div>

    @VMDisksListComp(vm)
    @VMISOsListComp(vm)
    @VMNICsListComp(vm)
}

templ vmDiskAddTemplate(vmName string, disks []Disk) {
    <div data-testid="vmDiskAddTemplate">
    <form action={ templ.URL("/vm/" + vmName + "/disk/add") } method="post">
        <label for="disk-select">Choose a disk:</label>
        <select class="form-select form-select-sm" name="disks" id="disk-select" size="10">
            for _, d := range disks {
              <option value={ d.Name }>{d.Name}</option>
            }
        </select>
        <button type="submit" class="btn btn-sm btn-primary">Submit</button>
    </form>
    </div>
}

templ vmISOAddTemplate(vmName string, isos []ISO) {
    <div data-testid="vmISOAddTemplate">
    <form action={ templ.URL("/vm/" + vmName + "/iso/add") } method="post">
        <label for="iso-select">Choose a iso:</label>
        <select class="form-select form-select-sm" size="10" name="isos" id="iso-select">
            for _, i := range isos {
              <option value={ i.Name }>{i.Name}</option>
            }
        </select>
        <button type="submit" class="btn btn-sm btn-primary">Submit</button>
    </form>
    </div>
}

templ vmNICAddTemplate(vmName string, nics []NIC) {
    <div data-testid="vmNICAddTemplate">
    <form action={ templ.URL("/vm/" + vmName + "/nic/add") } method="post">
        <label for="nic-select">Choose a nic:</label>
        <select class="form-select form-select-sm" size="10" name="nics" id="nic-select">
            for _, n := range nics {
              <option value={ n.Name }>{n.Name}</option>
            }
        </select>
        <button type="submit" class="btn btn-sm btn-primary">Submit</button>
    </form>
    </div>
}

templ VmNotFoundComponent(vms []VM) {
	@layoutVMs("VM - Not Found", vms, "") {
		<div data-testid="homeTemplate"></div>
        <div>VM Not found</div>
	}
}

templ StartButton(vm VM) {
    <button class="btn btn-primary" hx-post={ "/vm/" + vm.NameOrID + "/start" } hx-swap="outerHTML">Start</button>
}

templ StopButton(vm VM) {
    <button class="btn btn-primary" hx-post={ "/vm/" + vm.NameOrID + "/stop" } hx-swap="outerHTML">Stop</button>
}

templ VmDataOnly(vms []VM, vm VM, listenHost string, websockifyPort uint16) {
    @vmTemplate(vm, listenHost, websockifyPort)
}

templ DeleteVMButton(aVM VM) {
    <button class="btn btn-outline-danger btn-sm me-1" hx-delete={ "/vm/" + aVM.NameOrID } hx-target="body" hx-confirm={ "Are you sure you wish to delete vm " + aVM.NameOrID + "?"}>Delete</button>
}

templ DisconnectDiskButton(aVM VM, aDisk Disk) {
    <button class="btn btn-outline-danger btn-sm me-1" hx-delete={ "/vm/" + aVM.NameOrID + "/disk/" + aDisk.NameOrID } hx-target="body" hx-confirm={ "Are you sure you wish to disconnect disk " + aDisk.NameOrID + " from VM " + aVM.NameOrID + "?"}>Disconnect</button>
}

templ DisconnectISOButton(aVM VM, aISO ISO) {
    <button class="btn btn-outline-danger btn-sm me-1" hx-delete={ "/vm/" + aVM.NameOrID + "/iso/" + aISO.NameOrID } hx-target="body" hx-confirm={ "Are you sure you wish to disconnect ISO " + aISO.NameOrID + " from VM " + aVM.NameOrID + "?"}>Disconnect</button>
}

templ DisconnectNICButton(aVM VM, aNIC NIC) {
    <button class="btn btn-outline-danger btn-sm me-1" hx-delete={ "/vm/" + aVM.NameOrID + "/nic/" + aNIC.NameOrID } hx-target="body" hx-confirm={ "Are you sure you wish to disconnect NIC " + aNIC.NameOrID + " from VM " + aVM.NameOrID + "?"}>Disconnect</button>
}

templ DiskAddButton(aVM VM) {
    <a class="btn btn-primary btn-sm me-1" href={ templ.URL("/vm/" + aVM.NameOrID + "/disk/add") }>Add</a>
}

templ ISOAddButton(aVM VM) {
    <a class="btn btn-primary btn-sm me-1" href={ templ.URL("/vm/" + aVM.NameOrID + "/iso/add") }>Add</a>
}

templ NICAddButton(aVM VM) {
    <a class="btn btn-primary btn-sm me-1" href={ templ.URL("/vm/" + aVM.NameOrID + "/nic/add") }>Add</a>
}
