package main

import "strconv"
import "fmt"

templ vmsTemplate(vms []VM) {
	<div data-testid="vmsTemplate">
		for _, p := range vms {
			<div data-testid="vmsTemplateVM">
				<div data-testid="vmsTemplateVMName"><a href={ templ.URL("/vm/" + p.Name) }>{ p.Name }</a> (<a href={ templ.URL("/vm/" + p.ID)}>id</a>)</div>			</div>
		}
	</div>
}

templ vms(vms []VM) {
	@layout("VMs", vms) {
		@vmsTemplate(vms)
	}
}

templ vmTemplate(vm VM) {
    {{ cpusStr := strconv.FormatUint(vm.CPUs, 10) }}
    <div data-testid="vmTemplate">
        <div data-testid="vmTemplateVM">
			<div data-testid="vmsTemplateVMName">Name: { vm.Name }</div>
			<div data-testid="vmsTemplateVMID">ID: { vm.ID }</div>
			<div data-testid="vmsTemplateVMCPUs">CPUs: { cpusStr }</div>
            if vm.Running {
                <div>VM is running</div>
                @stopButton(vm)
                if vm.VNCPort > 0 {
                    <div>VNC port is { fmt.Sprintf("%d", vm.VNCPort) }. <a href={ templ.URL("/vnc/vnc.html?autoconnect=true&reconnect=true&host=" + listenHost + "&port=" + strconv.FormatUint(uint64(websockifyPort), 10) + "&path=" + vm.NameOrID + "&resize=scale&reconnect=true") }>Open VNC</a> </div>
                }
            } else {
                <div>VM is not running</div>
                @startButton(vm)
            }
        </div>
    </div>
}

templ vm(vms []VM, vm VM) {
    @layout("VM - " + vm.Name, vms) {
        @vmTemplate(vm)
    }
}

templ vmNotFoundComponent(vms []VM) {
	@layout("VM - Not Found", vms) {
		<div data-testid="homeTemplate"></div>
  	    <div>VM Not found</div>
	}
}

templ startButton(vm VM) {
    <button hx-post={ "/vm/" + vm.NameOrID + "/start" } hx-swap="outerHTML">Start</button>
}

templ stopButton(vm VM) {
    <button hx-post={ "/vm/" + vm.NameOrID + "/stop" } hx-swap="outerHTML">Stop</button>
}
